# -*- coding: utf-8 -*-
"""
Created on Fri Feb 14 09:34:16 2020

@author: LuisMartins
"""
#%% import rmtk modules
import capacity_start as cap
import select_gmrs_start as selgmrs
import fragility_vulnerability_start as fvb
import nlth_on_sdof as nlth

#%% import other modules 
import os 
import numpy as np
import glob
import matplotlib.pyplot as plt

# %% get input files
current_dir=os.getcwd()

cap_in_files=glob.glob(os.path.join(os.path.join(current_dir,'capacity','csvs','*.csv')))
gmrs_in_files=glob.glob(os.path.join(os.path.join(current_dir,'gmrs','databases','selected_based_on_pga','*.csv')))

# %% run nlth example (all IMs)
damp=0.075
ims_periods=np.array([0,0.2,0.3,0.5,0.6,1,2])

disps_array=np.zeros([len(gmrs_in_files),len(cap_in_files)])
accels_array=np.zeros([len(gmrs_in_files),len(cap_in_files)])
imls_array=np.zeros([len(gmrs_in_files),len(ims_periods)])

for i in range(len(cap_in_files)):
      
      cap_nlth_array,_,_=cap.read_capacity_csv_file(cap_in_files[i])
      building_class=cap_in_files[i].split('.')[0].split('\\')[-1]
      if not os.path.exists(os.path.join(current_dir,'outputs','out_dynamic_an_edps_imls',building_class)):
            os.makedirs(os.path.join(current_dir,'outputs','out_dynamic_an_edps_imls',building_class))
            
      for j in range(len(gmrs_in_files)):
            
            gmr_nlth=np.loadtxt(gmrs_in_files[j],delimiter=',')
            
            _, Sa=selgmrs.NewmarkBeta(gmr_nlth[:,0],gmr_nlth[:,1]*9.81,ims_periods,0.05)
            imls_array[j]=Sa
            _,disps,accels=nlth.run_nlth_analysis_on_sdof_ops_py(cap_nlth_array,gmr_nlth,damp,True)
            disps_array[j,i]=np.max(np.abs(disps))
            accels_array[j,i]=np.max(np.abs(accels))
            
      np.savetxt(os.path.join(current_dir,'outputs','out_dynamic_an_edps_imls',building_class,'imls.csv'),imls_array,delimiter=',')
      np.savetxt(os.path.join(current_dir,'outputs','out_dynamic_an_edps_imls',building_class,'max_disps.csv'),disps_array[:,i],delimiter=',')
      np.savetxt(os.path.join(current_dir,'outputs','out_dynamic_an_edps_imls',building_class,'max_accels.csv'),accels_array[:,i],delimiter=',')

# %% run fragility and economic vulnerability example

consequence=np.array([0.05,0.2,0.6,1])

for i in range(len(cap_in_files)):
      
      building_class=cap_in_files[i].split('.')[0].split('\\')[-1]
      
      if not os.path.exists(os.path.join(current_dir,'outputs','out_fragility_vulnerability',building_class)):
            os.makedirs(os.path.join(current_dir,'outputs','out_fragility_vulnerability',building_class))
            
      cap_nlth_array,_,_=cap.read_capacity_csv_file(cap_in_files[i])
      dam_model_drift=[0.75*cap_nlth_array[2,0],0.5*cap_nlth_array[2,0]+0.33*cap_nlth_array[-1,0],0.25*cap_nlth_array[2,0]+0.67*cap_nlth_array[-1,0],cap_nlth_array[-1,0]]
      
      for j in range(len(ims_periods)):
            imls=imls_array[:,j]
            edps=disps_array[:,i]
            imls_linspace,probability_damage_state,r_squared=fvb.fragility_censored_cloud_analysis(imls,edps,dam_model_drift,(1.5*cap_nlth_array[-1,0]))
            vul_curve_array=fvb.calculate_vul_curve_dam_to_loss(imls_linspace,probability_damage_state,consequence)
            frag_curves=np.column_stack([imls_linspace,probability_damage_state])
            
            fig=plt.figure()
            plt.plot(frag_curves[:,0],frag_curves[:,1:])
            plt.ylabel('Probability of Exceedance')
            plt.axis([0,np.max(frag_curves[:,0]),0,1])
            
            if j==0:
                  np.savetxt(os.path.join(current_dir,'outputs','out_fragility_vulnerability',building_class,'fragility_drift_'+'PGA'+'.csv'),frag_curves,delimiter=',')
                  np.savetxt(os.path.join(current_dir,'outputs','out_fragility_vulnerability',building_class,'vulnerability_drift_'+'PGA'+'.csv'),vul_curve_array,delimiter=',')
                  plt.xlabel('PGA [g]')
                  plt.legend(['DS1,r^2='+str(round(r_squared[0],2)),'DS2,r^2='+str(round(r_squared[1],2)),'DS3,r^2='+str(round(r_squared[2],2)),'DS4,r^2='+str(round(r_squared[3],2))])
                  plt.savefig(os.path.join(current_dir,'outputs','out_fragility_vulnerability',building_class,'fragility_'+'PGA'+'.png'))
            else:
                  np.savetxt(os.path.join(current_dir,'outputs','out_fragility_vulnerability',building_class,'fragility_drift'+'SA('+str(ims_periods[j])+').csv'),frag_curves,delimiter=',')
                  np.savetxt(os.path.join(current_dir,'outputs','out_fragility_vulnerability',building_class,'vulnerability_drift'+'SA('+str(ims_periods[j])+').csv'),vul_curve_array,delimiter=',')
                  plt.xlabel('SA('+str(ims_periods[j])+')[g]')
                  plt.legend(['DS1,r^2='+str(round(r_squared[0],2)),'DS2,r^2='+str(round(r_squared[1],2)),'DS3,r^2='+str(round(r_squared[2],2)),'DS4,r^2='+str(round(r_squared[3],2))])
                  plt.savefig(os.path.join(current_dir,'outputs','out_fragility_vulnerability',building_class,'fragility_'+'SA('+str(ims_periods[j])+').png'))
            plt.close('all')
            
            fig=plt.figure()
            plt.plot(vul_curve_array[:,0],vul_curve_array[:,1])
            plt.ylabel('Loss Ratio')
            plt.axis([0,np.max(frag_curves[:,0]),0,1])
            
            if j==0:
                  plt.xlabel('PGA [g]')
                  plt.savefig(os.path.join(current_dir,'outputs','out_fragility_vulnerability',building_class,'vulnerability_'+'PGA'+'.png'))
            else:
                  plt.xlabel('SA('+str(ims_periods[j])+')[g]')
                  plt.savefig(os.path.join(current_dir,'outputs','out_fragility_vulnerability',building_class,'vulnerability_'+'SA('+str(ims_periods[j])+').png'))
            plt.close('all')

