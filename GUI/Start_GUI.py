# import dependencies 
import os
import tkinter as tk
import tkinter.messagebox
from tkinter import ttk
from tkinter import filedialog
import matplotlib.pyplot as plt
import matplotlib
matplotlib.use("TkAgg")
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg

import numpy as np

import glob

#%% import backend functions
import capacity_start as cap
import select_gmrs_start as selgmrs
import csm_implementation as csm
import fragility_vulnerability_base as fvb
import nlth_on_sdof as nlth
import validations_start as vld
#%% general functions and classes for GUI

def browse_folder(tkvar):
    folder_selected = filedialog.askdirectory()
    tkvar_str=str(tkvar)
    eval(tkvar_str+".set(folder_selected)")
    return folder_selected

def browse_file(tkvar):
    file_selected = filedialog.askopenfilename()
    tkvar_str=str(tkvar)
    eval(tkvar_str+".set(file_selected)")
    return file_selected

def browse_csv_file(tkvar):
    file_selected = filedialog.askopenfilename(filetypes = (("csv files","*.csv"),("all files","*.*")))
    tkvar_str=str(tkvar)
    eval(tkvar_str+".set(file_selected)")
    return file_selected

def button_save_nparray_csv_file(np_array_to_save):
    filename=filedialog.asksaveasfile(defaultextension=".csv")
    np.savetxt(filename,np_array_to_save,delimiter=",")
    return True

def button_save_dataframe_csv_file(pd_dataframe_to_save):
    filename=filedialog.asksaveasfile(defaultextension=".csv")
    pd_dataframe_to_save.to_csv(filename,index=False)
    return True

#%% Start window

# development screen dimensions
dev_width_screen=1536
dev_height_screen=864

dev_width_screen_mm=406
dev_height_screen_mm=229

dev_width_screen_in=dev_width_screen_mm/25.4
dev_height_screen_in=dev_height_screen_mm/25.4

dev_screen_dpi=min(dev_height_screen/dev_height_screen_in,dev_width_screen/dev_width_screen_in)

dev_h_px_per_mm=dev_width_screen/dev_width_screen_mm
dev_v_px_per_mm=dev_height_screen/dev_height_screen_mm


# get vmtk root directory
vmtk_root_dir=os.path.dirname(os.getcwd())

#
root=tk.Tk()
root.title('GEM - Vulnerability Modellers ToolKit')
root.iconbitmap(os.path.join(os.getcwd(),'figs','GEM-LOGO-Red-CS3-square.ico'))

width_screen = root.winfo_screenwidth()
height_screen = root.winfo_screenheight()

width_mm = root.winfo_screenmmwidth()
height_mm = root.winfo_screenmmheight() 

width_in=width_mm/25.4
height_in=height_mm/25.4

screen_dpi=min(height_screen/height_in,width_screen/width_in)

h_px_per_mm=width_screen/width_mm
v_px_per_mm=height_screen/height_mm

scale_viewer_x=max(int(round(h_px_per_mm/dev_h_px_per_mm,0)),1)
scale_viewer_y=max(int(round(v_px_per_mm/dev_v_px_per_mm,0)),1)
dpi_scaler=screen_dpi/dev_screen_dpi

root.state("zoomed")

#%% ttk styles

boldBtnStyle = ttk.Style ()
boldBtnStyle.configure("Bold.TButton", font = ('Sans','10','bold'))

runBtnStyle=ttk.Style()
runBtnStyle.configure("Run.TButton",font= ('Sans','16','normal'))

entryStyle=ttk.Style()
entryStyle.configure("E.TEntry",foreground="gray40")

radioBtnJust=ttk.Style()
radioBtnJust.configure("RBJust.TRadiobutton",justify='left')

labelJustLft=ttk.Style()
labelJustLft.configure("LbJustLft.TLabel",justify='left')

dropMenuStyle=ttk.Style()
dropMenuStyle.configure("dropMenu.TCombobox",foreground="gray40")

#%% ttk NoteBook

notebook = ttk.Notebook(root,width=int(1*width_screen),height=int(1*height_screen))

f1 = ttk.Frame(notebook,width=int(1*width_screen),height=int(1*height_screen))
f2 = ttk.Frame(notebook,width=int(1*width_screen),height=int(1*height_screen))
f3 = ttk.Frame(notebook,width=int(1*width_screen),height=int(1*height_screen))
f4 = ttk.Frame(notebook,width=int(1*width_screen),height=int(1*height_screen))
f5 = ttk.Frame(notebook,width=int(1*width_screen),height=int(1*height_screen))
f6 = ttk.Frame(notebook,width=int(1*width_screen),height=int(1*height_screen))
f7 = ttk.Frame(notebook,width=int(1*width_screen),height=int(1*height_screen))

notebook.add(f1, text='Demand')
notebook.add(f2, text='Capacity')
notebook.add(f3, text='Structural Response')
notebook.add(f4, text='Fragility Analysis')
notebook.add(f5, text='Vulnerability Analysis')
notebook.add(f6, text='Compare Results')
notebook.add(f7, text='Verify Results')

#%% ------ DEMAND TAB -----

# list of records and IM
label1_1=ttk.Label(f1,text="Location of ground \nmotion records:",style="LbJustLft.TLabel").grid(row=0,column=0,pady=scale_viewer_y*(15,25),sticky="w")
gmrs_location_folderPath_tk_var = tk.StringVar()
gmrs_location_folderPath_tk_var.set("Please select a folder")
entry1_1 = ttk.Entry(f1,textvariable=gmrs_location_folderPath_tk_var,style="E.TEntry",width=scale_viewer_x*35)
btnBrowse1_1 = ttk.Button(f1, text="Browse",command=lambda:browse_folder("gmrs_location_folderPath_tk_var"))
btnBrowse1_1.grid(row=0,column=2,pady=scale_viewer_y*(15,25))

label2_1=ttk.Label(f1,text="Intensity measure").grid(row=0,column=3,padx=scale_viewer_x*10,pady=scale_viewer_y*(15,25),sticky="e")
IMs = ['PGA','SA(0.2s)','SA(0.3s)','SA(0.5s)','SA(0.6s)','SA(1.0s)','SA(2.0s)']
IM_tk_var = tk.StringVar()
IM_tk_var.set('PGA') # set the default option
dropMenu1_1 = ttk.Combobox(f1,textvariable=IM_tk_var,values=IMs,style="dropMenu.TCombobox")

# options based on radio button selection
label3_1=ttk.Label(f1,text="Target intensity measure levels").grid(row=3,column=0,sticky="e")
imls_entry_tk_var=tk.StringVar()
imls_entry_tk_var.set("Values separated by commas")
entry2_1 = ttk.Entry(f1,textvariable=imls_entry_tk_var,style="E.TEntry",width=scale_viewer_x*35)
entry2_1.configure(state='disabled')

label3_1=ttk.Label(f1,text="Number of records per IML").grid(row=3,column=3,sticky="e")
no_gmrs_entry_tk_var=tk.IntVar()
entry3_1 = ttk.Entry(f1,textvariable=no_gmrs_entry_tk_var,style="E.TEntry",width=scale_viewer_x*5)
entry3_1.configure(state='disabled')

label4_1=ttk.Label(f1,text="Min scaling factor").grid(row=4,column=0,sticky="e")
min_scale_factor_entry_tk_var=tk.DoubleVar()
entry4_1 = ttk.Entry(f1,textvariable=min_scale_factor_entry_tk_var,style="E.TEntry",width=scale_viewer_x*5)
entry4_1.configure(state='disabled')

label5_1=ttk.Label(f1,text="Max scaling factor").grid(row=4,column=3,sticky="e")
max_scale_factor_entry_tk_var=tk.DoubleVar()
entry5_1 = ttk.Entry(f1,textvariable=max_scale_factor_entry_tk_var,style="E.TEntry",width=scale_viewer_x*5)
entry5_1.configure(state='disabled')

label6_1=ttk.Label(f1,text="Target intensity measure levels").grid(row=6,column=0,sticky="e")
entry6_1 = ttk.Entry(f1,textvariable=imls_entry_tk_var,style="E.TEntry",width=scale_viewer_x*35)
entry6_1.configure(state='disabled')

label6_2_1=ttk.Label(f1,text="Number of records per IML").grid(row=6,column=3,sticky="e")
entry6_2_1 = ttk.Entry(f1,textvariable=no_gmrs_entry_tk_var,style="E.TEntry",width=scale_viewer_x*5)
entry6_2_1.configure(state='disabled')

label7_1=ttk.Label(f1,text="Min scaling factor").grid(row=7,column=0,pady=scale_viewer_y*10,sticky="e")
entry7_1 = ttk.Entry(f1,textvariable=min_scale_factor_entry_tk_var,style="E.TEntry",width=scale_viewer_x*5)
entry7_1.configure(state='disabled')

label7_2_1=ttk.Label(f1,text="Max scaling factor").grid(row=7,column=3,sticky="e")
entry7_2_1 = ttk.Entry(f1,textvariable=max_scale_factor_entry_tk_var,style="E.TEntry",width=scale_viewer_x*5)
entry7_2_1.configure(state='disabled')

label7_3_1=ttk.Label(f1,text="Vs30 [m/s]").grid(row=7,column=5,sticky="e")
vs30_tk_var=tk.DoubleVar()
entry7_3_1 = ttk.Entry(f1,textvariable=vs30_tk_var,style="E.TEntry",width=scale_viewer_x*5)
entry7_3_1.configure(state='disabled')

label8_1=ttk.Label(f1,text="Hazard disaggregation file:").grid(row=8,column=0,pady=scale_viewer_y*10,sticky="e")
hzd_disag_filePath_tk_var = tk.StringVar()
hzd_disag_filePath_tk_var.set("Please select a file")
entry8_1 = ttk.Entry(f1,textvariable=hzd_disag_filePath_tk_var,style="E.TEntry",width=35)
entry8_1.configure(state='disabled')

btnBrowse2_1 = ttk.Button(f1, text="Browse",command=lambda:browse_file("hzd_disag_filePath_tk_var"))
btnBrowse2_1.configure(state='disabled')

# radio button with options
def rad_button_enable(value):
      if value==1:
            btnBrowse2_1.configure(state='disabled');btnBrowse2_1.update()
            entry2_1.configure(state='disabled'); entry2_1.update()
            entry3_1.configure(state='disabled'); entry3_1.update()
            entry4_1.configure(state='disabled'); entry4_1.update()
            entry5_1.configure(state='disabled'); entry5_1.update()
            entry6_1.configure(state='disabled'); entry6_1.update()
            entry6_2_1.configure(state='disabled'); entry6_2_1.update()
            entry7_1.configure(state='disabled'); entry7_1.update()
            entry7_2_1.configure(state='disabled'); entry7_2_1.update()
            entry7_3_1.configure(state='disabled'); entry7_3_1.update()
            entry8_1.configure(state='disabled'); entry8_1.update()
      elif value==2:
            entry2_1.configure(state='normal'); entry2_1.update()
            entry3_1.configure(state='normal'); entry3_1.update()
            entry4_1.configure(state='normal'); entry4_1.update()
            entry5_1.configure(state='normal'); entry5_1.update()
            
            entry6_1.configure(state='disabled'); entry6_1.update()
            entry6_2_1.configure(state='disabled'); entry6_2_1.update()
            entry7_1.configure(state='disabled'); entry7_1.update()
            entry7_2_1.configure(state='disabled'); entry7_2_1.update()
            entry7_3_1.configure(state='disabled'); entry7_3_1.update()
            entry8_1.configure(state='disabled'); entry8_1.update()
            btnBrowse2_1.configure(state='disabled');btnBrowse2_1.update()
      elif value==3:
            entry6_1.configure(state='normal'); entry6_1.update()
            entry6_2_1.configure(state='normal'); entry6_2_1.update()
            entry7_1.configure(state='normal'); entry7_1.update()
            entry7_2_1.configure(state='normal'); entry7_2_1.update()
            entry7_3_1.configure(state='normal'); entry7_3_1.update()
            entry8_1.configure(state='normal'); entry8_1.update()
            btnBrowse2_1.configure(state='normal'); btnBrowse2_1.update()
            
            entry2_1.configure(state='disabled'); entry2_1.update()
            entry3_1.configure(state='disabled'); entry3_1.update()
            entry4_1.configure(state='disabled'); entry4_1.update()
            entry5_1.configure(state='disabled'); entry5_1.update()
      else:
            return False
      return True

radio_var=tk.IntVar()
ttk.Radiobutton(f1,text="Use all records",style="RBJust.TRadiobutton",variable=radio_var,value=1,command=lambda:rad_button_enable(1)).grid(row=1,column=0,sticky = 'w')
ttk.Radiobutton(f1,text="Select records based \non range of IMs",style="RBJust.TRadiobutton",variable=radio_var,value=2,command=lambda:rad_button_enable(2)).grid(row=2,column=0,sticky = 'w')
ttk.Radiobutton(f1,text="Select records based \non conditional spectrum method",style="RBJust.TRadiobutton",variable=radio_var,value=3,command=lambda:rad_button_enable(3)).grid(row=5,column=0,sticky = 'w')

# plot and save data
label9_1=ttk.Label(f1,text="Output/selected gmrs directory:").grid(row=9,column=0,pady=scale_viewer_y*(25,10),sticky="w")
out_demand_folderPath_tk_var = tk.StringVar()
out_demand_folderPath_tk_var.set("Please select a folder")
entry9_1 = ttk.Entry(f1,textvariable=out_demand_folderPath_tk_var,style="E.TEntry",width=scale_viewer_x*35).grid(row=9,column=1,pady=scale_viewer_y*(25,10),padx=scale_viewer_x*10)
btnBrowse3_1 = ttk.Button(f1, text="Browse",command=lambda:browse_folder("out_demand_folderPath_tk_var"))
btnBrowse3_1.grid(row=9,column=2,pady=scale_viewer_y*(25,10))

label10_1=ttk.Label(f1,text="Min T [s]").grid(row=10,column=0,pady=scale_viewer_y*10,sticky="e")
min_T_entry_tk_var=tk.DoubleVar()
entry9_1 = ttk.Entry(f1,textvariable=min_T_entry_tk_var,style="E.TEntry",width=scale_viewer_x*5).grid(row=10,column=1,padx=scale_viewer_x*10,pady=scale_viewer_y*10,sticky="w")

label11=ttk.Label(f1,text="Max T [s]").grid(row=11,column=0,pady=scale_viewer_y*10,sticky="e")
max_T_entry_tk_var=tk.DoubleVar()
entry10 = ttk.Entry(f1,textvariable=max_T_entry_tk_var,style="E.TEntry",width=scale_viewer_x*5).grid(row=11,column=1,padx=scale_viewer_x*10,pady=scale_viewer_y*10,sticky="w")

label11_1=ttk.Label(f1,text="No. steps T").grid(row=12,column=0,pady=scale_viewer_y*10,sticky="e")
no_step_T_entry_tk_var=tk.IntVar()
entry11 = ttk.Entry(f1,textvariable=no_step_T_entry_tk_var,style="E.TEntry",width=scale_viewer_x*5).grid(row=12,column=1,padx=scale_viewer_x*10,pady=scale_viewer_y*10,sticky="w")

# compute select gmrs
progress0_1=ttk.Progressbar(f1,mode='indeterminate',length =scale_viewer_x*100)

def run_progress_bar():
      progress0_1.grid(row=9,column=4,pady=scale_viewer_y*(25,10),sticky="w")
      progress0_1.start()
      return True

def stop_progress_bar():
      
      progress0_1.stop()
      progress0_1.grid_forget()
      return True

def button_select_gmr(gmrs_location_folder,selectedIM,radio_opt,out_folder,ngmrs_iml,max_scale,min_scale,imls_strg,hzd_disag_file,vs30):

      
      run_progress_bar()
      
      if selectedIM=='PGA':
            period=0
      elif selectedIM=='SA(0.2s)':
            period=0.2
      elif selectedIM=='SA(0.3s)':
            period=0.3
      elif selectedIM=='SA(0.5s)':
            period=0.5
      elif selectedIM=='SA(0.6s)':
            period=0.6
      elif selectedIM=='SA(1.0s)':
            period=1.0
      else:
            period=2.0
            
      
      if radio_opt==2:
            imls_str_list=imls_strg.split(",")
            imls_values=np.array([float(imls_str_list[i]) for i in range(len(imls_str_list))])
            sel_per_imls,scale_fct=selgmrs.select_from_folder_with_imls(imls_values,gmrs_location_folder,ngmrs_iml,max_scale,min_scale,[period])
            selgmrs.export_selected_scaled_gmrs(gmrs_location_folder,sel_per_imls,scale_fct,out_folder)
            
      elif radio_opt==3:
            seedValue=0
            nTrials=10
            
            imls_str_list=imls_strg.split(",")
            imls_values=np.array([float(imls_str_list[i]) for i in range(len(imls_str_list))])
            
            mw,dist,epsilon=csm.get_OQ_disaggregation(hzd_disag_file)
            
            selectionParams={}
            selectionParams["gmrs_folder"]=gmrs_location_folder
            selectionParams["cond"]=1
            selectionParams["arb"]=2
            selectionParams["RotD"]=50
            selectionParams["isScaled"]=1
            selectionParams["maxScale"]=max_scale
            selectionParams["tol"]=0.10
            selectionParams["optType"]=0
            selectionParams["penalty"]=0
            selectionParams["weights"]=np.array([1,2,0.3])
            selectionParams["nLoop"]=10
            selectionParams["useVar"]=1
            selectionParams["nGM"]=ngmrs_iml
            selectionParams["Tcond"]=period
            selectionParams["Tmin"]=0.1
            selectionParams["Tmax"]=10
            
            rup={}
            rup["M_bar"]=mw
            rup["Rjb"]=dist
            rup["eps_bar"]=epsilon
            rup["z1"]=999
            rup["region"]=1
            rup["Fault_Type"]=0
            rup["Vs30"]=vs30
            
            IMs={}
            selectionParams["TgtPer"]=np.logspace(np.log10(selectionParams["Tmin"]),np.log10(selectionParams["Tmax"]),30)
            selected_gmrs_final=[]
            
            scale_factor_selected_gmrs_final=[]
            
            for iIM in range(len(imls_values)):
                  
                  selectionParams["SaTcond"]=imls_values[iIM]

                  [SaKnown,selectionParams,indPer,knownPer,metadata] =csm.screen_gmrs_folder(selectionParams)
      
                  temp=np.zeros([np.shape(SaKnown)[0],len(indPer)])
                  for i in range(np.shape(SaKnown)[0]):
                        for j in range(len(indPer)):
                              row_idx=i
                              col_idx=indPer[j]
                              temp[i][j]=np.log(SaKnown[row_idx][col_idx])
      
                  IMs["sampleBig"] = temp
                  targetSa=csm.get_target_spectrum(knownPer,selectionParams,indPer,rup)
      
                  selectionParams["lnSa1"]=targetSa["meanReq"][selectionParams["indTcond"]]
                  
                  # Simulate response spectra matching the computed targets
                  simulatedSpectra=csm.simulate_spectra(targetSa,selectionParams,seedValue,nTrials)
                  
                  # Find best matches to the simulated spectra from ground-motion database
                  IMs =csm.find_ground_motions(selectionParams,simulatedSpectra,IMs)
                  
                  if csm.within_tolerance(IMs["sampleSmall"], targetSa, selectionParams)==1:
                        print("Error metric is within tolerance, skipping optimization")
                  else:
                        IMs =csm.optimize_ground_motions(selectionParams, targetSa, IMs)
                        
                  recIdx=np.zeros([selectionParams["nGM"],1])
                  temp=list(metadata["Filename"][:])
                  for i in range(selectionParams["nGM"]):
                        row_idx=IMs["recIDs"][i]
                        recIdx[i]=metadata["allowedIndex"][int(row_idx)]
                        selected_gmrs_final.append(str(temp[int(row_idx)][0]))
                        scale_factor_selected_gmrs_final.append((IMs["scaleFac"][i]))
            
            selgmrs.export_selected_scaled_gmrs(gmrs_location_folder,selected_gmrs_final,scale_factor_selected_gmrs_final,out_folder)
      
      stop_progress_bar()
      return True

btnRun1_1=ttk.Button(f1,text="Start selection"+u"\u2bc8",
                     command=lambda:button_select_gmr(gmrs_location_folderPath_tk_var.get(),IM_tk_var.get(),radio_var.get(),out_demand_folderPath_tk_var.get(),no_gmrs_entry_tk_var.get(),max_scale_factor_entry_tk_var.get(),min_scale_factor_entry_tk_var.get(),imls_entry_tk_var.get(),hzd_disag_filePath_tk_var.get(),vs30_tk_var.get()),
                     style="Run.TButton").grid(row=9,column=4,pady=scale_viewer_y*(25,10),sticky="w")

progress_var_sp = tk.DoubleVar()
progress1_1 = ttk.Progressbar(f1, orient ="horizontal",length =scale_viewer_x*100, variable=progress_var_sp, maximum=1, mode='determinate')

def button_plot_spectra(gmr_folder,minT,maxT,n_steps):
      
      progress_var.set(0)
      
      period_array=np.linspace(minT,maxT,n_steps)
      gmrs_in_files=glob.glob(os.path.join(gmr_folder,'*.csv'))
      spectra_values=np.zeros([len(gmrs_in_files),n_steps])
      
      for i in range(len(gmrs_in_files)):
            
            gmr=np.loadtxt(gmrs_in_files[i],delimiter=',')
            _,Sa=selgmrs.NewmarkBeta(gmr[:,0],gmr[:,1]*9.81,period_array,0.05)
            spectra_values[i,:]=Sa
            progress_var_sp.set((1+i)/len(gmrs_in_files)); progress1_1.update()
      
      fig=plt.figure(figsize=(6,4),dpi=60)
      plt.loglog(period_array,np.mean(spectra_values,axis=0),color='b')
      for i in range(0,len(gmrs_in_files)):
            plt.loglog(period_array,spectra_values[i,:],color='k')
      
      plt.xlabel('Period [s]')
      plt.ylabel('Spectral acceleration [g]')
      plt.legend(['Mean','Individual spectra'])
      
      canvas = FigureCanvasTkAgg(fig, master=f1)
      canvas.draw()
      canvas.get_tk_widget().grid(row=10,column=4,rowspan=6,columnspan=2,sticky="w")
      plt.close('all')

      return True

btnPlot1_1=ttk.Button(f1,text="Plot spectra",command=lambda:button_plot_spectra(out_demand_folderPath_tk_var.get(),max_T_entry_tk_var.get(),min_T_entry_tk_var.get(),no_step_T_entry_tk_var.get()))
btnPlot1_1.grid(row=13,column=0,sticky="e")

# grid all the elements
entry1_1.grid(row=0,column=1,pady=scale_viewer_y*(15,25),padx=scale_viewer_x*10)
dropMenu1_1.grid(row=0,column=4,pady=scale_viewer_y*(15,25))

entry2_1.grid(row=3,column=1,pady=scale_viewer_y*10,padx=scale_viewer_x*10)
entry3_1.grid(row=3,column=4,pady=scale_viewer_y*10,padx=scale_viewer_x*10)
entry4_1.grid(row=4,column=1,pady=scale_viewer_y*10,padx=scale_viewer_x*10,sticky="w")
entry5_1.grid(row=4,column=4,pady=scale_viewer_y*10,padx=scale_viewer_x*10)
entry6_1.grid(row=6,column=1,pady=scale_viewer_y*10,padx=scale_viewer_x*10)
entry6_2_1.grid(row=6,column=4,pady=scale_viewer_y*10,padx=scale_viewer_x*10)
entry7_1.grid(row=7,column=1,pady=scale_viewer_y*10,padx=scale_viewer_x*10,sticky="w")
entry7_2_1.grid(row=7,column=4,pady=scale_viewer_y*10,padx=scale_viewer_x*10)
entry7_3_1.grid(row=7,column=6,pady=scale_viewer_y*10,padx=scale_viewer_x*10)
entry8_1.grid(row=8,column=1,pady=scale_viewer_y*10,padx=scale_viewer_x*10)
btnBrowse2_1.grid(row=8,column=2)
progress1_1.grid(row=13,column=1,sticky="w",padx=scale_viewer_x*10)
#%% ------ Capacity TAB ----

# radio button with options
label1_2=ttk.Label(f2,text="Building class tag:").grid(row=1,column=0,padx=scale_viewer_x*10,pady=scale_viewer_y*10,sticky="e")
build_class_str_tk_var= tk.StringVar()
entry1_2 = ttk.Entry(f2,textvariable=build_class_str_tk_var,style="E.TEntry",width=scale_viewer_x*10)
entry1_2.configure(state="normal")

label2_2=ttk.Label(f2,text="Type of model:").grid(row=1,column=2,padx=scale_viewer_x*10,pady=scale_viewer_y*10)
types_of_capacity = ['Bilinear','Trilinear','Quadrilinear']
types_of_capacity_tk_var=tk.StringVar()
types_of_capacity_tk_var.set('Bilinear') # set the default option
dropMenu1_2 = ttk.Combobox(f2,textvariable=types_of_capacity_tk_var,values=types_of_capacity,style="dropMenu.TCombobox")
dropMenu1_2.configure(state="normal")

label3_2=ttk.Label(f2,text="List of Sds [m]:").grid(row=1,column=4,padx=scale_viewer_x*10,pady=scale_viewer_y*10)
list_of_sds_cap_tk_var=tk.StringVar()
list_of_sds_cap_tk_var.set("Values separated by commas")
entry2_2=ttk.Entry(f2,textvariable=list_of_sds_cap_tk_var,style="E.TEntry",width=scale_viewer_x*30)
entry2_2.configure(state="normal")

label4_2=ttk.Label(f2,text="List of Sas [g]:").grid(row=2,column=4,padx=scale_viewer_x*10,pady=scale_viewer_y*10)
list_of_sas_cap_tk_var=tk.StringVar()
list_of_sas_cap_tk_var.set("Values separated by commas")
entry3_2=ttk.Entry(f2,textvariable=list_of_sas_cap_tk_var,style="E.TEntry",width=scale_viewer_x*30)
entry3_2.configure(state="normal")

label5_2=ttk.Label(f2,text="Capacity curves file:").grid(row=4,column=0,padx=scale_viewer_x*10,pady=scale_viewer_y*10,sticky="e")
cap_curves_filePath_tk_var = tk.StringVar()
cap_curves_filePath_tk_var.set("Please select a csv file")
entry4_2 = ttk.Entry(f2,textvariable=cap_curves_filePath_tk_var,style="E.TEntry",width=scale_viewer_x*80)
btnBrowse1_2=ttk.Button(f2, text="Browse",command=lambda:browse_csv_file("cap_curves_filePath_tk_var"))
entry4_2.configure(state="disabled")
btnBrowse1_2.configure(state="disabled")

label6_2=ttk.Label(f2,text="Capacity curves folder:").grid(row=6,column=0,padx=scale_viewer_x*10,pady=scale_viewer_y*(10,50),sticky="e")
cap_curves_folderPath_tk_var = tk.StringVar()
cap_curves_folderPath_tk_var.set("Please select a folder")
entry5_2 = ttk.Entry(f2,textvariable=cap_curves_folderPath_tk_var,style="E.TEntry",width=scale_viewer_x*80)
btnBrowse2_2=ttk.Button(f2, text="Browse",command=lambda:browse_folder("cap_curves_folderPath_tk_var"))
entry5_2.configure(state="disabled")
btnBrowse2_2.configure(state="disabled")

building_class_tk_var=tk.StringVar()
building_classes=[];
dropMenu2_2 = ttk.Combobox(f2,textvariable=building_class_tk_var,values=building_classes,style="dropMenu.TCombobox")
dropMenu2_3 = ttk.Combobox(f3,textvariable=building_class_tk_var,values=['all']+building_classes,style="dropMenu.TCombobox")

def rad_button_enable_2(value):
      building_classes=[]
      
      if value==1:
            btnBrowse1_2.configure(state='disabled');btnBrowse1_2.update()
            btnBrowse2_2.configure(state='disabled');btnBrowse2_2.update()
            entry4_2.configure(state='disabled'); entry4_2.update()
            entry5_2.configure(state='disabled'); entry5_2.update()
            entry1_2.configure(state="normal"); entry1_2.update()
            entry2_2.configure(state="normal"); entry2_2.update()
            entry3_2.configure(state="normal"); entry2_2.update()
            dropMenu1_2.configure(state="normal");dropMenu1_2.update()
            
            building_classes.append(build_class_str_tk_var.get())
            dropMenu2_2.configure(values=building_classes); dropMenu2_2.update()
            dropMenu2_3.configure(values=['all']+building_classes); dropMenu2_3.update()
      elif value==2:
            entry1_2.configure(state="disabled"); entry1_2.update()
            entry2_2.configure(state="disabled"); entry2_2.update()
            entry3_2.configure(state="disabled"); entry2_2.update()
            dropMenu1_2.configure(state="disabled");dropMenu1_2.update()
            btnBrowse2_2.configure(state='disabled');btnBrowse2_2.update()
            entry5_2.configure(state='disabled'); entry5_2.update()
            btnBrowse1_2.configure(state='normal');btnBrowse1_2.update()
            entry4_2.configure(state='normal'); entry4_2.update()
            
            temp=cap_curves_filePath_tk_var.get()
            temp2=temp.split('/')
            temp3=temp2[-1].split('.')
            building_classes.append(temp3[0])
            dropMenu2_2.configure(values=building_classes); dropMenu2_2.update()
            dropMenu2_3.configure(values=['all']+building_classes); dropMenu2_3.update()
      elif value==3:
            entry1_2.configure(state="disabled"); entry1_2.update()
            entry2_2.configure(state="disabled"); entry2_2.update()
            entry3_2.configure(state="disabled"); entry2_2.update()
            dropMenu1_2.configure(state="disabled");dropMenu1_2.update()
            entry4_2.configure(state='disabled'); entry4_2.update()
            btnBrowse1_2.configure(state='disabled');btnBrowse1_2.update()
            btnBrowse2_2.configure(state='normal');btnBrowse2_2.update()
            entry5_2.configure(state='normal'); entry5_2.update()
            
            cap_in_files=glob.glob(os.path.join(cap_curves_folderPath_tk_var.get(),'*.csv'))
            for i in range(len(cap_in_files)):
                  temp=cap_in_files[i].split('/')
                  temp2=temp[-1].split('\\')
                  temp3=temp2[-1].split('.')
                  building_classes.append(temp3[0])
                  
            dropMenu2_2.configure(values=building_classes); dropMenu2_2.update()
            dropMenu2_3.configure(values=['all']+building_classes); dropMenu2_3.update()
      else:
            return False
      return building_classes

radio_var1_2=tk.IntVar()
radio_var1_2.set("1")
ttk.Radiobutton(f2,text="Input a single capacity curve",style="RBJust.TRadiobutton",variable=radio_var1_2,value=1,command=lambda:rad_button_enable_2(1)).grid(row=0,column=0,sticky = 'w',pady=scale_viewer_y*(15,0),columnspan=5)
ttk.Radiobutton(f2,text="Load single or multiple capacity curves for single building class",style="RBJust.TRadiobutton",variable=radio_var1_2,value=2,command=lambda:rad_button_enable_2(2)).grid(row=3,column=0,sticky = 'w',columnspan=5)
ttk.Radiobutton(f2,text="Load single or multiple capacity curves for multiple building classs",style="RBJust.TRadiobutton",variable=radio_var1_2,value=3,command=lambda:rad_button_enable_2(3)).grid(row=5,column=0,sticky = 'w',columnspan=5)

label7_2=ttk.Label(f2,text="Building class:").grid(row=7,column=0,pady=scale_viewer_y*(0,10),padx=scale_viewer_x*10)

label8_2=ttk.Label(f2,text="Plot Options:").grid(row=8,column=0,pady=scale_viewer_y*10,padx=scale_viewer_x*10)
types_cap_plots=['All curves','Mean curve']

types_cap_plots_tk_var=tk.StringVar()
dropMenu3_2 = ttk.Combobox(f2,textvariable=types_cap_plots_tk_var,values=types_cap_plots,style="dropMenu.TCombobox").grid(row=8,column=1,pady=scale_viewer_y*10,padx=scale_viewer_x*10)
dropMenu2_2.update()

def button_plot_cap(building_class,type_of_plt,radio_opt,list_sds,list_sas,cap_file,cap_folder,type_of_cap):
      
      if radio_opt==1:
            sds=list_sds.split(',')
            sds_array=np.array([float(sds[i]) for i in range(len(sds))])
            sas=list_sas.split(',')
            sas_array=np.array([float(sas[i]) for i in range(len(sas))])
            
            if type_of_cap=='Bilinear' and len(sds)!=3:
                  tk.messagebox.showerror("Error", "Missmatch between selected type of model and number of input points")
                  return False
            elif type_of_cap=='Trilinear' and len(sds)!=4:
                  tk.messagebox.showerror("Error", "Missmatch between selected type of model and number of input points")
                  return False
            elif type_of_cap=='Quadrilinear' and len(sds)!=5:
                  tk.messagebox.showerror("Error", "Missmatch between selected type of model and number of input points")
                  return False
            
      elif radio_opt==2:
            cap_array,sds_array,sas_array=cap.read_capacity_csv_file(cap_file)
            
      elif radio_opt==3:
            cap_array,sds_array,sas_array=cap.read_capacity_csv_file(os.path.join(cap_folder,building_class+'.csv'))
            
      fig=plt.figure(figsize=(6,4),dpi=60)
      
      if type_of_plt=='All curves':
            plt.plot(sds_array,sas_array)
      elif type_of_plt=='Mean curve':
            plt.plot(np.mean(sds_array,axis=1),np.mean(sas_array,axis=1))
            
      plt.xlabel('Spectral displacement [m]')
      plt.ylabel('Spectral acceleration [g]')
      
      canvas = FigureCanvasTkAgg(fig, master=f2)
      canvas.draw()
      canvas.get_tk_widget().grid(row=7,column=3,rowspan=6,columnspan=2,sticky="e")
      plt.close('all')
      
      return True

btnPlot1_2=ttk.Button(f2,text="Plot Capacity curves",command=lambda:button_plot_cap(building_class_tk_var.get(),types_cap_plots_tk_var.get(),radio_var1_2.get(),
                                                                                    list_of_sds_cap_tk_var.get(),list_of_sas_cap_tk_var.get(),
                                                                                    cap_curves_filePath_tk_var.get(),cap_curves_folderPath_tk_var.get(),types_of_capacity_tk_var.get())).grid(row=9,column=1,pady=scale_viewer_y*10,padx=scale_viewer_x*10,sticky="e")

# grid all widgets
entry1_2.grid(row=1,column=1,pady=scale_viewer_y*10,padx=scale_viewer_x*10,sticky="w")
dropMenu1_2.grid(row=1,column=3,pady=scale_viewer_y*10,padx=scale_viewer_x*10)
entry2_2.grid(row=1,column=5,padx=scale_viewer_x*10,pady=scale_viewer_y*10)
entry3_2.grid(row=2,column=5,padx=scale_viewer_x*10,pady=scale_viewer_y*10)
entry4_2.grid(row=4,column=1,padx=scale_viewer_x*10,pady=scale_viewer_y*10,columnspan=4,sticky="w")
btnBrowse1_2.grid(row=4,column=5,padx=scale_viewer_x*10,pady=scale_viewer_y*10,sticky="w")
entry5_2.grid(row=6,column=1,padx=scale_viewer_x*10,pady=scale_viewer_y*(10,50),columnspan=4,sticky="w")
btnBrowse2_2.grid(row=6,column=5,padx=scale_viewer_x*10,pady=scale_viewer_y*(10,50),sticky="w")
dropMenu2_2.grid(row=7,column=1,pady=scale_viewer_y*(0,10),padx=scale_viewer_x*10)

#%%------ Structural Response TAB ----

label2_3=ttk.Label(f3,text="Damping ratio file:",style="LbJustLft.TLabel").grid(row=1,column=0,pady=scale_viewer_y*10,padx=scale_viewer_x*10,sticky="e")
damp_ratio_path_tk_var=tk.StringVar()
damp_ratio_path_tk_var.set("Please select a csv file")
entry2_3=ttk.Entry(f3,textvariable=damp_ratio_path_tk_var,style="E.TEntry").grid(row=1,column=1,padx=scale_viewer_x*10,pady=scale_viewer_y*10,sticky="w")
btnBrowse2_3 = ttk.Button(f3, text="Browse",command=lambda:browse_csv_file("damp_ratio_path_tk_var")).grid(row=1,column=2,padx=scale_viewer_x*10,pady=scale_viewer_y*10,sticky="w")

label3_3=ttk.Label(f3,text="Degradation:").grid(row=1,column=3,padx=scale_viewer_x*10,pady=scale_viewer_y*10,sticky="w")
degrad_type=["Energy","None"]
degrad_type_tk_var=tk.StringVar()
degrad_type_tk_var.set('Energy') # set the default option
dropMenu1_3 = ttk.Combobox(f3,textvariable=degrad_type_tk_var,values=degrad_type,style="dropMenu.TCombobox").grid(row=1,column=4,padx=scale_viewer_x*10,pady=scale_viewer_y*10,sticky="e")

label4_3=ttk.Label(f3,text="EDPs:").grid(row=1,column=5,padx=scale_viewer_x*10,pady=scale_viewer_y*10)
max_displ_yes_no_tk_var = tk.IntVar()
checkBox1_3 = ttk.Checkbutton(f3, variable=max_displ_yes_no_tk_var, onvalue=1, offvalue=0, text="Max displ.").grid(row=1,column=6,padx=scale_viewer_x*10,pady=scale_viewer_y*10)

max_accel_yes_no_tk_var = tk.IntVar()
checkBox2_3 = ttk.Checkbutton(f3, variable=max_accel_yes_no_tk_var, onvalue=1, offvalue=0, text="Max accel.").grid(row=1,column=7,padx=scale_viewer_x*10,pady=scale_viewer_y*10,sticky="e")

label5_3=ttk.Label(f3,text="Output directory:").grid(row=2,column=0,pady=scale_viewer_y*10,sticky="e")
out_struct_response_folderPath_tk_var = tk.StringVar()
out_struct_response_folderPath_tk_var.set("Please select a folder")
entry3_3 = ttk.Entry(f3,textvariable=out_struct_response_folderPath_tk_var,style="E.TEntry",width=scale_viewer_x*20).grid(row=2,column=1,pady=scale_viewer_y*10,padx=scale_viewer_x*10,columnspan=3,sticky="w")
btnBrowse3_3 = ttk.Button(f3, text="Browse",command=lambda:browse_folder("out_struct_response_folderPath_tk_var")).grid(row=2,column=2,padx=scale_viewer_x*10,pady=scale_viewer_y*10,sticky="w")

label6_3=ttk.Label(f3,text="Building class:").grid(row=4,column=0,pady=scale_viewer_y*(0,50),padx=scale_viewer_x*10)
dropMenu2_3.grid(row=4,column=1,pady=scale_viewer_y*(0,50),padx=scale_viewer_x*10)
progress_var = tk.DoubleVar()
progress1_3 = ttk.Progressbar(f3, orient ="horizontal",length =scale_viewer_x*275, variable=progress_var, maximum=1, mode='determinate')

def run_nlth(radio_var_demand,building_class,radio_opt,list_sds,list_sas,cap_file,cap_folder,all_gmrs_folder,sel_gmrs_folder,out_dir,damp_file,degrad):
      
      progress_var.set(0); progress1_3.update()
      
      if building_class=='all':
            cap_files=glob.glob(os.path.join(cap_folder,'*.csv'))
      elif radio_opt==2:
            cap_files=list([cap_file])
      elif radio_opt==3 and building_class!='all':
            cap_files=glob.glob(os.path.join(cap_folder,building_class+'.csv'))
      elif radio_opt==1:
            cap_files=np.ones([1,1])
            
      if radio_var_demand==1:
            gmrs_folder=all_gmrs_folder
      else:
            gmrs_folder=sel_gmrs_folder
            
      gmr_files=glob.glob(os.path.join(gmrs_folder,'*.csv'))
      
      
      n_cap_per_file=np.zeros([len(cap_files),1])
      for j in range(len(cap_files)):
            cap_array,_,_=cap.read_capacity_csv_file(cap_files[j]);
            n_cap_per_file[j,0]=cap_array.shape[1]/2
      
      damping_data=(np.genfromtxt(damp_file,delimiter=',',dtype='str'))
      counter=0
      for j in range(len(cap_files)):
            
            max_disp=np.zeros([len(gmr_files)*int((n_cap_per_file[j,0])),1])
            max_accel=np.zeros([len(gmr_files)*int((n_cap_per_file[j,0])),1])
            imls=np.zeros([len(gmr_files)*int(n_cap_per_file[j,0]),7])
            
            counter2=-1
            
            for i in range(len(gmr_files)):
                  
                  counter+=1
                  
                  progress_var.set((counter/(len(gmr_files)*len(cap_files))))
                  progress1_3.update()
                  
                  gmr_nlth=np.loadtxt(gmr_files[i],delimiter=',')
                  _, Sa=selgmrs.NewmarkBeta(gmr_nlth[:,0],gmr_nlth[:,1]*9.81,[0,0.2,0.3,0.5,0.6,1,2],0.05)
                  
                  if radio_opt==1:
                        tag=str(building_class[0])
                        bool_vec=damping_data==tag
                        damp=float(damping_data[bool_vec[:,0]==1,1])
                        sds=list_sds.split(',')
                        sds_array=np.array([float(sds[k]) for k in range(len(sds))])
                        sas=list_sas.split(',')
                        sas_array=np.array([float(sas[k]) for k in range(len(sas))])
                        cap_nlth_array=np.column_stack([sds_array,sas_array])
                  else:
                        tag=cap_files[j].split('.')[-2].split('/')[-1].split('\\')[-1]
                        bool_vec=damping_data==tag
                        damp=float(damping_data[bool_vec[:,0]==1,1])
                        cap_nlth_array,x_arrays,y_arrays=cap.read_capacity_csv_file(cap_files[j])
                  
                  if not os.path.exists(os.path.join(out_dir,tag)):
                        os.makedirs(os.path.join(out_dir,tag))
                  
                  for k in range(int(n_cap_per_file[j,0])):
                        
                        counter2+=1
                        
                        cap_nlth=cap_nlth_array[:,2*k:2*k+2]
                        imls[counter2]=Sa
                        
                        if degrad=='None':
                              time,disps,accels=nlth.run_nlth_analysis_on_sdof_ops_py(cap_nlth,gmr_nlth,damp,False)
                        else:
                              time,disps,accels=nlth.run_nlth_analysis_on_sdof_ops_py(cap_nlth,gmr_nlth,damp,True)
                              
                        max_disp[counter2,0]=np.max(np.abs(disps))
                        max_accel[counter2,0]=np.max(np.abs(accels))
                        
            np.savetxt(os.path.join(out_dir,tag,'pga_sa02_sa03_sa05_sa06_sa1_sa2.csv')
                       ,imls,delimiter=',')
            np.savetxt(os.path.join(out_dir,tag,'max_displacements.csv')
                       ,max_disp[:,0],delimiter=',')
            np.savetxt(os.path.join(out_dir,tag,'max_accelerations.csv')
                       ,max_accel[:,0],delimiter=',')
                  
      
      return max_disp,max_accel,imls

btnRun1_3=ttk.Button(f3,text="Start "+u"\u2bc8",command=lambda:run_nlth(radio_var.get(),building_class_tk_var.get(),radio_var1_2.get(),list_of_sds_cap_tk_var.get(),list_of_sas_cap_tk_var.get(),cap_curves_filePath_tk_var.get(),cap_curves_folderPath_tk_var.get(),gmrs_location_folderPath_tk_var.get(),
                                                                        out_demand_folderPath_tk_var.get(),
                                                                        out_struct_response_folderPath_tk_var.get(),
                                                                        damp_ratio_path_tk_var.get(),degrad_type_tk_var.get()),style="Run.TButton")

btnRun1_3.grid(row=2,column=7,pady=scale_viewer_y*10,padx=scale_viewer_x*10,sticky="e")

progress1_3.grid(row=4,column=5,columnspan=3,sticky="e",pady=scale_viewer_y*(10,50),padx=scale_viewer_x*10)
label7_3=ttk.Label(f3,text="Intensity measure levels:").grid(row=6,column=0,pady=scale_viewer_y*(0,10),padx=scale_viewer_x*10)

def rad_button_enable_3(value):
      if value==1:
           entry4_3.configure(state="disabled");entry4_3.update()
           btnBrowse4_3.configure(state="disabled");btnBrowse4_3.update()
           btnCompute1_3.configure(state="normal");btnCompute1_3.update()
      elif value==2:
           entry4_3.configure(state="normal");entry4_3.update()
           btnBrowse4_3.configure(state="normal");btnBrowse4_3.update()
           btnCompute1_3.configure(state="disabled");btnCompute1_3.update()
      else:
           return False
      return True

gmrs_path_pop_up=tk.StringVar();gmrs_path_pop_up.set("Please select a folder")
outputs_path_pop_up=tk.StringVar();outputs_path_pop_up.set("Please select a folder")

def button_compute_ims():

      def compute_imls_and_save(gmrs_folder,out_dir):
      
            gmr_files=glob.glob(os.path.join(gmrs_folder,'*.csv'));
            
            imls=np.zeros([len(gmr_files),7])
            for i in range(len(gmr_files)):
                  progress_var.set((i+1)/len(gmr_files))
                  progress_pop.update()
                  gmr_nlth=np.loadtxt(gmr_files[i],delimiter=',')
                  _, Sa=selgmrs.NewmarkBeta(gmr_nlth[:,0],gmr_nlth[:,1]*9.81,[0,0.2,0.3,0.5,0.6,1,2],0.05)
                  imls[i]=Sa
            
            np.savetxt(os.path.join(out_dir,'pga_sa02_sa03_sa05_sa06_sa1_sa2.csv'),imls,delimiter=',')
            return True

      pop_up_window=tk.Toplevel(f3)
      pop_up_window.title("Compute IMs from records"); pop_up_window.iconbitmap(os.path.join(os.getcwd(),'figs','GEM-LOGO-Red-CS3-square.ico'))
      progress_var = tk.DoubleVar()
      progress_var.set(0)
      label_pop=ttk.Label(pop_up_window,text="Ground motion records directory:")
      label_pop.grid(row=0,column=0,padx=scale_viewer_x*10,pady=scale_viewer_y*10,sticky="e")
      entry_pop=ttk.Entry(pop_up_window,textvariable=gmrs_path_pop_up,style="E.TEntry")
      entry_pop.grid(row=0,column=1,padx=scale_viewer_x*10,pady=scale_viewer_y*10)
      btnBrowse_pop=ttk.Button(pop_up_window,text="Browse",command=lambda:browse_folder("gmrs_path_pop_up"))
      btnBrowse_pop.grid(row=0,column=2,padx=scale_viewer_x*10,pady=scale_viewer_y*10,sticky="e")
      label_pop_2=ttk.Label(pop_up_window,text="Output directory:")
      label_pop_2.grid(row=1,column=0,padx=scale_viewer_x*10,pady=scale_viewer_y*10,sticky="e")
      entry_pop_2=ttk.Entry(pop_up_window,textvariable=outputs_path_pop_up,style="E.TEntry")
      entry_pop_2.grid(row=1,column=1,padx=scale_viewer_x*10,pady=scale_viewer_y*10)
      btnBrowse_pop_2=ttk.Button(pop_up_window,text="Browse",command=lambda:browse_folder("outputs_path_pop_up"))
      btnBrowse_pop_2.grid(row=1,column=2,padx=scale_viewer_x*10,pady=scale_viewer_y*10,sticky="e")
      
      progress_pop=ttk.Progressbar(pop_up_window, orient ="horizontal",length =scale_viewer_x*275,variable=progress_var, maximum=1, mode='determinate')
      
      btnRun_pop=ttk.Button(pop_up_window,text="Start "+u"\u2bc8",command=lambda:compute_imls_and_save(gmrs_path_pop_up.get(),outputs_path_pop_up.get()),style="Run.TButton")
      btnRun_pop.grid(row=9,column=3,pady=scale_viewer_y*10,padx=scale_viewer_x*10,sticky="e")
      progress_pop.grid(row=10,column=1,columnspan=3,sticky="e",pady=scale_viewer_y*(10,50),padx=scale_viewer_x*10) 
      return True

btnCompute1_3=ttk.Button(f3,text="Compute",command=lambda:button_compute_ims())
btnCompute1_3.configure(state="disabled")
records_pathFolder3_1=tk.StringVar()
records_pathFolder3_1.set("Please select a folder")
entry4_3=ttk.Entry(f3,textvariable=records_pathFolder3_1,style="E.TEntry")
entry4_3.configure(state="disabled")
btnBrowse4_3 = ttk.Button(f3, text="Browse",command=lambda:browse_folder("records_pathFolder3_1"))
btnBrowse4_3.configure(state="disabled")

radio_var3_1=tk.IntVar()
ttk.Radiobutton(f3,text="Compute from records:",style="RBJust.TRadiobutton",variable=radio_var3_1,value=1,command=lambda:rad_button_enable_3(1)).grid(row=6,column=1,sticky = 'w',padx=scale_viewer_x*10,pady=scale_viewer_y*(0,10))
ttk.Radiobutton(f3,text="Load from files:",style="RBJust.TRadiobutton",variable=radio_var3_1,value=2,command=lambda:rad_button_enable_3(2)).grid(row=7,column=1,sticky = 'w',padx=scale_viewer_x*10,pady=scale_viewer_y*10)

btnCompute1_3.grid(row=6,column=2,sticky = 'w',padx=scale_viewer_x*10,pady=scale_viewer_y*(0,10))
entry4_3.grid(row=7,column=2,sticky = 'w',padx=scale_viewer_x*10,pady=scale_viewer_y*10)
btnBrowse4_3.grid(row=7,column=3,padx=scale_viewer_x*10,pady=scale_viewer_y*10)

max_displ_yes_no=max_displ_yes_no_tk_var.get()
max_accel_yes_no=max_accel_yes_no_tk_var.get()
edps_list=['Max displ.', 'Max accel.']
label8_3=ttk.Label(f3,text="EDPs:").grid(row=9,column=0,padx=scale_viewer_x*10,pady=scale_viewer_y*10)
edps_plot=tk.StringVar()
dropMenu3_3 = ttk.Combobox(f3,textvariable=edps_plot,values=edps_list,style="dropMenu.TCombobox").grid(row=9,column=1,pady=scale_viewer_y*10,padx=scale_viewer_x*10)

label8_3=ttk.Label(f3,text="IMs:").grid(row=9,column=2,padx=scale_viewer_x*10,pady=scale_viewer_y*10)
imls_plot=tk.StringVar()
dropMenu3_3 = ttk.Combobox(f3,textvariable=imls_plot,values=IMs,style="dropMenu.TCombobox").grid(row=9,column=3,pady=scale_viewer_y*10,padx=scale_viewer_x*10)

def plot_edp_imls(outputs_folder,selectedIM,edp,log_scale):
      
      ims_file=np.loadtxt(os.path.join(outputs_folder,'pga_sa02_sa03_sa05_sa06_sa1_sa2.csv'),delimiter=',')
      
      if selectedIM=='PGA':
            imls=ims_file[:,0]
      elif selectedIM=='SA(0.2s)':
            imls=ims_file[:,1]
      elif selectedIM=='SA(0.3s)':
            imls=ims_file[:,2]
      elif selectedIM=='SA(0.5s)':
            imls=ims_file[:,3]
      elif selectedIM=='SA(0.6s)':
            imls=ims_file[:,4]
      elif selectedIM=='SA(1.0s)':
            imls=ims_file[:,5]
      else:
            imls=ims_file[:,6]
      
      if edp=='Max displ.':
            edps=np.loadtxt(os.path.join(outputs_folder,'max_displacements.csv'),delimiter=',')
      else:
            edps=np.loadtxt(os.path.join(outputs_folder,'max_accelerations.csv'),delimiter=',')
            
      fig=plt.figure(figsize=(6,4),dpi=60)
      if log_scale==1:
            plt.loglog(imls,edps,'bo')
      else:
            plt.plot(imls,edps,'bo')
      plt.xlabel('IMLs')
      plt.ylabel('EDPs')
      
      canvas = FigureCanvasTkAgg(fig, master=f3)
      canvas.draw()
      canvas.get_tk_widget().grid(row=11,column=2,rowspan=6,columnspan=2,sticky="w")
      plt.close('all')
                  
      
      return True

log_scale_yes_no_tk_var = tk.IntVar()
log_scale_yes_no_tk_var.set(0)
checkBox3_3 = ttk.Checkbutton(f3, variable=log_scale_yes_no_tk_var, onvalue=1, offvalue=0, text="Log scale").grid(row=11,column=0,padx=scale_viewer_x*10,pady=scale_viewer_y*10)
btnPlot1_4=ttk.Button(f3,text="Plot EDP vs IML",command=lambda:plot_edp_imls(entry4_3.get(),imls_plot.get(),edps_plot.get(),log_scale_yes_no_tk_var.get())).grid(row=11,column=1,pady=scale_viewer_y*10,padx=scale_viewer_x*10)


#%%----- Fragility TAB ----

label1_4=ttk.Label(f4,text="Regression method:").grid(row=0,column=0,pady=scale_viewer_y*(15,10),padx=scale_viewer_x*10)
reg_method=["MLE-Uncensored","MLE-Censored"]
reg_method_tk_var=tk.StringVar()
reg_method_tk_var.set("MLE-Censored")

label2_4=ttk.Label(f4,text="Censoring factor:").grid(row=0,column=2,pady=scale_viewer_y*(15,10),padx=scale_viewer_x*10)
censor_factor_tk_var=tk.DoubleVar()
entry1_4 = ttk.Entry(f4,textvariable=censor_factor_tk_var,style="E.TEntry",width=scale_viewer_x*5)

label2_4_2=ttk.Label(f4,text="Building-to-building sigma:").grid(row=0,column=4,pady=scale_viewer_y*(15,10),padx=scale_viewer_x*10)
bld2bld_sigma_tk_var=tk.DoubleVar()
entry1_4_2 = ttk.Entry(f4,textvariable=bld2bld_sigma_tk_var,style="E.TEntry",width=scale_viewer_x*5)

def combobox_event1_4(event):
      if dropMenu1_4.get()=="MLE-Censored":
            entry1_4.configure(state="normal");entry1_4.update()
      else:
            entry1_4.configure(state="disabled");entry1_4.update()
      return True

dropMenu1_4 = ttk.Combobox(f4,textvariable=reg_method_tk_var,values=reg_method,style="dropMenu.TCombobox")
dropMenu1_4.bind('<<ComboboxSelected>>', combobox_event1_4)

dropMenu1_4.grid(row=0,column=1,pady=scale_viewer_y*(15,15),padx=scale_viewer_x*10,sticky="w")
entry1_4.grid(row=0,column=3,pady=scale_viewer_y*(15,15),padx=scale_viewer_x*10,sticky="w")

label2_4=ttk.Label(f4,text="Damage model file:").grid(row=1,column=0,pady=scale_viewer_y*10,padx=scale_viewer_x*10)
dam_file_tk_var=tk.StringVar()
dam_file_tk_var.set("Please select a csv file")
entry2_4=ttk.Entry(f4,textvariable=dam_file_tk_var,style="E.TEntry",width=scale_viewer_x*45).grid(row=1,column=1,columnspan=2,padx=scale_viewer_x*10,pady=scale_viewer_y*10,sticky="w")
btnBrowse1_4=ttk.Button(f4, text="Browse",command=lambda:browse_csv_file("dam_file_tk_var")).grid(row=1,column=3,padx=scale_viewer_x*10,pady=scale_viewer_y*10,sticky="w")

label3_4=ttk.Label(f4,text="EDPs folder:").grid(row=2,column=0,pady=scale_viewer_y*10,padx=scale_viewer_x*10)
edps_folder_tk_var=tk.StringVar()
edps_folder_tk_var.set("Please select a folder")
entry3_4=ttk.Entry(f4,textvariable=edps_folder_tk_var,style="E.TEntry",width=scale_viewer_x*45).grid(row=2,column=1,columnspan=2,padx=scale_viewer_x*10,pady=scale_viewer_y*10,sticky="w")
btnBrowse2_4=ttk.Button(f4, text="Browse",command=lambda:browse_folder("edps_folder_tk_var")).grid(row=2,column=3,padx=scale_viewer_x*10,pady=scale_viewer_y*10,sticky="w")

label4_4=ttk.Label(f4,text="EDPs:").grid(row=2,column=4,padx=scale_viewer_x*10,pady=scale_viewer_y*10)
max_displ_yes_no_frag_tk_var = tk.IntVar()
max_displ_yes_no_frag_tk_var.set(0)
checkBox1_4 = ttk.Checkbutton(f4, variable=max_displ_yes_no_frag_tk_var, onvalue=1, offvalue=0, text="Max displ.").grid(row=2,column=5,padx=scale_viewer_x*10,pady=scale_viewer_y*10)

max_accel_yes_no_frag_tk_var = tk.IntVar()
max_accel_yes_no_frag_tk_var.set(0)
checkBox2_4 = ttk.Checkbutton(f4, variable=max_accel_yes_no_frag_tk_var, onvalue=1, offvalue=0, text="Max accel.").grid(row=2,column=6,padx=scale_viewer_x*10,pady=scale_viewer_y*10,sticky="e")

label5_4=ttk.Label(f4,text="IMs file:").grid(row=3,column=0,pady=scale_viewer_y*10,padx=scale_viewer_x*10,sticky="e")
ims_file_frag_tk_var=tk.StringVar()
ims_file_frag_tk_var.set("Please select a csv file")
entry4_4=ttk.Entry(f4,textvariable=ims_file_frag_tk_var,style="E.TEntry",width=scale_viewer_x*45).grid(row=3,column=1,columnspan=2,padx=scale_viewer_x*10,pady=scale_viewer_y*10,sticky="w")
btnBrowse3_4=ttk.Button(f4, text="Browse",command=lambda:browse_csv_file("ims_file_frag_tk_var")).grid(row=3,column=3,padx=scale_viewer_x*10,pady=scale_viewer_y*10,sticky="w")

label5_4=ttk.Label(f4,text="Fragility output\ndirectory:").grid(row=4,column=0,pady=scale_viewer_y*(10,50),padx=scale_viewer_x*10)
frag_out_folder_tk_var=tk.StringVar()
frag_out_folder_tk_var.set("Please select a folder")
entry5_4=ttk.Entry(f4,textvariable=frag_out_folder_tk_var,style="E.TEntry",width=scale_viewer_x*45).grid(row=4,column=1,columnspan=2,padx=scale_viewer_x*10,pady=scale_viewer_y*(10,50),sticky="w")
btnBrowse4_4=ttk.Button(f4, text="Browse",command=lambda:browse_folder("frag_out_folder_tk_var")).grid(row=4,column=3,padx=scale_viewer_x*10,pady=scale_viewer_y*(10,50),sticky="w")

dropMenu2_4 = ttk.Combobox(f4,textvariable=IM_tk_var,values=IMs,style="dropMenu.TCombobox").grid(row=3,column=4,pady=scale_viewer_y*(10,10),padx=scale_viewer_x*10)

def run_fragility(reg_mthd,cens_factor,dam_file,edps_folder,max_disp_yes_no,max_accel_yes_no,imls_file,selectedIM,outfolder,bld2bld):
      
      imls_array=np.loadtxt(imls_file,delimiter=',')
      dam_array=np.loadtxt(dam_file,delimiter=',')
      
      if reg_mthd=='MLE-Uncensored':
            cens_limit=999
      else:
            cens_limit=dam_array[-1]*cens_factor
            
      if selectedIM=='PGA':
            imls=imls_array[:,0]
      elif selectedIM=='SA(0.2s)':
            imls=imls_array[:,1]
      elif selectedIM=='SA(0.3s)':
            imls=imls_array[:,2]
      elif selectedIM=='SA(0.5s)':
            imls=imls_array[:,3]
      elif selectedIM=='SA(0.6s)':
            imls=imls_array[:,4]
      elif selectedIM=='SA(1.0s)':
            imls=imls_array[:,5]
      else:
            imls=imls_array[:,6]
      
      if max_disp_yes_no==True and max_accel_yes_no==False:
            edps=np.loadtxt(os.path.join(edps_folder,'max_displacements.csv'),delimiter=',')
      elif max_disp_yes_no==False and max_accel_yes_no==True:
            edps=np.loadtxt(os.path.join(edps_folder,'max_displacements.csv'),delimiter=',')
      
      imls_linspace,probability_damage_state,r_square=fvb.fragility_censored_cloud_analysis(imls,edps,dam_array,cens_limit,bld2bld)
      out_array=np.column_stack([imls_linspace,probability_damage_state])
      np.savetxt(os.path.join(outfolder,'fragility_'+selectedIM+'_.csv'),out_array,delimiter=',')
      
      return imls_linspace,probability_damage_state,r_square


btnRun1_4=ttk.Button(f4,text="Start "+u"\u2bc8",command=lambda:run_fragility(reg_method_tk_var.get(),censor_factor_tk_var.get(),dam_file_tk_var.get(),
                                                                edps_folder_tk_var.get(),max_displ_yes_no_frag_tk_var.get(),
                                                                max_accel_yes_no_frag_tk_var.get(),
                                                                ims_file_frag_tk_var.get(),IM_tk_var.get(),frag_out_folder_tk_var.get(),bld2bld_sigma_tk_var.get()),style="Run.TButton").grid(row=4,column=6,pady=scale_viewer_y*(10,50),padx=scale_viewer_x*10,sticky="e")


label6_4=ttk.Label(f4,text="Building class:").grid(row=5,column=0,pady=scale_viewer_y*(0,10),padx=scale_viewer_x*10)
dropMenu4_4 = ttk.Combobox(f4,textvariable=building_class_tk_var,values=building_classes,style="dropMenu.TCombobox").grid(row=5,column=1,pady=scale_viewer_y*(0,10),padx=scale_viewer_x*10)

def button_plot_frag(max_disp_yes_no,max_accel_yes_no,selectedIM,outfolder):
     
      frag_inputs=np.loadtxt(os.path.join(outfolder,'fragility_'+selectedIM+'_.csv'),delimiter=',')
      
      fig=plt.figure(figsize=(6,4),dpi=60)
      
      plt.plot(frag_inputs[:,0],frag_inputs[:,1:])
      plt.ylabel('Probability of Exceedance')
      plt.xlabel(selectedIM)
      plt.axis([0,np.max(frag_inputs[:,0]),0,1])
      
      canvas = FigureCanvasTkAgg(fig, master=f4)
      canvas.draw()
      canvas.get_tk_widget().grid(row=6,column=1,rowspan=6,columnspan=2,sticky="w")
      plt.close('all')
      
      return True     
  

btnPlot1_4=ttk.Button(f4,text="Plot function",command=lambda:button_plot_frag(max_displ_yes_no_frag_tk_var.get(),
                                                                max_accel_yes_no_frag_tk_var.get(),IM_tk_var.get(),frag_out_folder_tk_var.get())).grid(row=6,column=0,pady=scale_viewer_y*10,padx=scale_viewer_x*10)

#grid all 
entry1_4.grid(row=0,column=3,pady=scale_viewer_y*(15,15),padx=scale_viewer_x*10,sticky="w")
entry1_4_2.grid(row=0,column=5,pady=scale_viewer_y*(15,15),padx=scale_viewer_x*10,sticky="w")

#%% -------- Vulnerability TAB --------

label1_5=ttk.Label(f5,text="Conversion type:").grid(row=0,column=0,pady=scale_viewer_y*(15,10),padx=scale_viewer_x*10)
type_of_vul_conversion=["EDP-to-loss","Damage-to-loss"]
type_of_vul_conversion_tk_var=tk.StringVar()
type_of_vul_conversion_tk_var.set("EDP-to-loss")

propag_uncert_yes_no_tk_var = tk.IntVar()
propag_uncert_yes_no_tk_var.set(0)
checkBox1_5 = ttk.Checkbutton(f5, variable=propag_uncert_yes_no_tk_var, onvalue=1, offvalue=0, text="Propagate uncertainty").grid(row=0,column=2,pady=scale_viewer_y*(15,15),padx=scale_viewer_x*10)

label3_5=ttk.Label(f5,text="IMs file:").grid(row=2,column=0,pady=scale_viewer_y*10,padx=scale_viewer_x*10,sticky="e")
ims_file_tk_var=tk.StringVar()
ims_file_tk_var.set("Please select a csv file")
entry2_5=ttk.Entry(f5,textvariable=ims_file_tk_var,style="E.TEntry",width=scale_viewer_x*45)
btnBrowse2_5=ttk.Button(f5, text="Browse",command=lambda:browse_csv_file("ims_file_tk_var"))

label4_5=ttk.Label(f5,text="EDPs:").grid(row=3,column=0,pady=scale_viewer_y*10,padx=scale_viewer_x*10,sticky="e")
edps_vul_folder_tk_var=tk.StringVar()
edps_vul_folder_tk_var.set("Please select a folder")
entry3_5=ttk.Entry(f5,textvariable=edps_vul_folder_tk_var,style="E.TEntry",width=scale_viewer_x*45)
btnBrowse3_5=ttk.Button(f5, text="Browse",command=lambda:browse_folder("edps_vul_folder_tk_var"))

label5_5=ttk.Label(f5,text="Fragility folder:").grid(row=4,column=0,pady=scale_viewer_y*10,padx=scale_viewer_x*10,sticky="e")
frag_vul_folder_tk_var=tk.StringVar()
frag_vul_folder_tk_var.set("Please select a folder")
entry4_5=ttk.Entry(f5,textvariable=frag_vul_folder_tk_var,style="E.TEntry",width=scale_viewer_x*45)
btnBrowse4_5=ttk.Button(f5, text="Browse",command=lambda:browse_folder("frag_vul_folder_tk_var"))
entry4_5.configure(state="disabled")
btnBrowse4_5.configure(state="disabled")
dropMenu2_5 = ttk.Combobox(f5,textvariable=IM_tk_var,values=IMs,style="dropMenu.TCombobox")

def combobox_event1_5(event):
      if dropMenu1_5.get()=="EDP-to-loss":
            entry4_5.configure(state="disabled"); entry4_5.update()
            btnBrowse4_5.configure(state="disabled"); btnBrowse4_5.update()
            entry2_5.configure(state="normal");entry2_5.update()
            entry3_5.configure(state="normal");entry3_5.update()
            btnBrowse2_5.configure(state="normal"); btnBrowse2_5.update()
            btnBrowse3_5.configure(state="normal"); btnBrowse3_5.update()
            dropMenu2_5.configure(state="normal"); dropMenu2_5.update()
      else:
            entry4_5.configure(state="normal"); entry4_5.update()
            btnBrowse4_5.configure(state="normal"); btnBrowse4_5.update()
            entry2_5.configure(state="disabled");entry2_5.update()
            entry3_5.configure(state="disabled");entry3_5.update()
            btnBrowse2_5.configure(state="disabled"); btnBrowse2_5.update()
            btnBrowse3_5.configure(state="disabled"); btnBrowse3_5.update()
            dropMenu2_5.configure(state="normal"); dropMenu2_5.update()
      return True

dropMenu1_5 = ttk.Combobox(f5,textvariable=type_of_vul_conversion_tk_var,values=type_of_vul_conversion,style="dropMenu.TCombobox")
dropMenu1_5.bind('<<ComboboxSelected>>', combobox_event1_5)
dropMenu1_5.grid(row=0,column=1,pady=scale_viewer_y*(15,15),padx=scale_viewer_x*10,sticky="w")

label2_5=ttk.Label(f5,text="Conversion model:").grid(row=1,column=0,pady=scale_viewer_y*10,padx=scale_viewer_x*10)
conv_model_file_tk_var=tk.StringVar()
conv_model_file_tk_var.set("Please select a csv file")
entry1_5=ttk.Entry(f5,textvariable=conv_model_file_tk_var,style="E.TEntry",width=scale_viewer_x*45).grid(row=1,column=1,columnspan=2,padx=scale_viewer_x*10,pady=scale_viewer_y*10,sticky="w")
btnBrowse1_5=ttk.Button(f5, text="Browse",command=lambda:browse_csv_file("conv_model_file_tk_var")).grid(row=1,column=3,padx=scale_viewer_x*10,pady=scale_viewer_y*10,sticky="w")

entry2_5.grid(row=2,column=1,columnspan=2,padx=scale_viewer_x*10,pady=scale_viewer_y*10,sticky="w")
btnBrowse2_5.grid(row=2,column=3,padx=scale_viewer_x*10,pady=scale_viewer_y*10,sticky="w")

entry3_5.grid(row=3,column=1,columnspan=2,padx=scale_viewer_x*10,pady=scale_viewer_y*10,sticky="w")
btnBrowse3_5.grid(row=3,column=3,padx=scale_viewer_x*10,pady=scale_viewer_y*10,sticky="w")

entry4_5.grid(row=4,column=1,columnspan=2,padx=scale_viewer_x*10,pady=scale_viewer_y*10,sticky="w")
btnBrowse4_5.grid(row=4,column=3,padx=scale_viewer_x*10,pady=scale_viewer_y*10,sticky="w")

dropMenu2_5.grid(row=2,column=4,pady=scale_viewer_y*10,padx=scale_viewer_x*10)

label6_5=ttk.Label(f5,text="Vulnerability output\ndirectory:").grid(row=5,column=0,pady=scale_viewer_y*(10,50),padx=scale_viewer_x*10)
vul_out_folder_tk_var=tk.StringVar()
vul_out_folder_tk_var.set("Please select a folder")
entry5_5=ttk.Entry(f5,textvariable=vul_out_folder_tk_var,style="E.TEntry",width=scale_viewer_x*45).grid(row=5,column=1,columnspan=2,padx=scale_viewer_x*10,pady=scale_viewer_y*(10,50),sticky="w")
btnBrowse5_5=ttk.Button(f5, text="Browse",command=lambda:browse_folder("vul_out_folder_tk_var")).grid(row=5,column=3,padx=scale_viewer_x*10,pady=scale_viewer_y*(10,50),sticky="w")

def compute_vul_func(type_of_vul_conversion,frag_vul_folder,selectedIM,conv_file,vul_out_folder,edps_folder,im_file,max_disp_yes_no,max_accel_yes_no,uncertainty_yes_no):
      
      conversion_model=np.loadtxt(conv_file,delimiter=',')
      if type_of_vul_conversion=='Damage-to-loss':
            frag_file=np.loadtxt(os.path.join(frag_vul_folder,'fragility_'+selectedIM+'_.csv'),delimiter=',')
            imls=frag_file[:,0]
            poes=frag_file[:,1:]
            vul_array=fvb.calculate_vul_curve_dam_to_loss(imls,poes,conversion_model)
            
            if uncertainty_yes_no:
                  sigma_loss=np.zeros(vul_array.shape)
                  for i in range(vul_array.shape[0]):
                        mean_loss_ratio=vul_array[i,1]
                        sigma_loss[i,0]=vul_array[i,0]
                        sigma_loss[i,1],_,_=fvb.calculate_sigma_loss(mean_loss_ratio)
                        
                  np.savetxt(os.path.join(vul_out_folder,'sigma_loss_'+selectedIM+'_.csv'),sigma_loss,delimiter=',')
            
      elif type_of_vul_conversion=='EDP-to-loss':
            
            if max_disp_yes_no==True and max_accel_yes_no==False:
                  edps=np.loadtxt(os.path.join(edps_folder,'max_displacements.csv'),delimiter=',')
            elif max_disp_yes_no==False and max_accel_yes_no==True:
                  edps=np.loadtxt(os.path.join(edps_folder,'max_displacements.csv'),delimiter=',')
            
            imls_array=np.loadtxt(im_file,delimiter=',')
            if selectedIM=='PGA':
                  imls=imls_array[:,0]
            elif selectedIM=='SA(0.2s)':
                  imls=imls_array[:,1]
            elif selectedIM=='SA(0.3s)':
                  imls=imls_array[:,2]
            elif selectedIM=='SA(0.5s)':
                  imls=imls_array[:,3]
            elif selectedIM=='SA(0.6s)':
                  imls=imls_array[:,4]
            elif selectedIM=='SA(1.0s)':
                  imls=imls_array[:,5]
            else:
                  imls=imls_array[:,6]
            
            vul_array=fvb.calculate_vul_curve_edps_to_loss(imls,edps,conversion_model[:,1],conversion_model[:,0])
      
      
      
      np.savetxt(os.path.join(vul_out_folder,'vulnerability_'+selectedIM+'_.csv'),vul_array,delimiter=',')
      
      return True


btnRun1_5=ttk.Button(f5,text="Start "+u"\u2bc8",command=lambda:compute_vul_func(type_of_vul_conversion_tk_var.get(),frag_vul_folder_tk_var.get(),IM_tk_var.get(),conv_model_file_tk_var.get(),vul_out_folder_tk_var.get(),edps_vul_folder_tk_var.get(),ims_file_tk_var.get(),max_displ_yes_no_frag_tk_var.get(),max_accel_yes_no_frag_tk_var.get(),),
                     style="Run.TButton").grid(row=5,column=6,pady=scale_viewer_y*(10,50),padx=scale_viewer_x*10,sticky="e")

label7_5=ttk.Label(f5,text="Building class:").grid(row=7,column=0,pady=scale_viewer_y*(0,10),padx=scale_viewer_x*10)
dropMenu3_5 = ttk.Combobox(f5,textvariable=building_class_tk_var,values=building_classes,style="dropMenu.TCombobox").grid(row=7,column=1,pady=scale_viewer_y*(0,10),padx=scale_viewer_x*10)

def button_plot_vul_frag(selectedIM,vul_out_folder):
     
      vul_inputs=np.loadtxt(os.path.join(vul_out_folder,'vulnerability_'+selectedIM+'_.csv'),delimiter=',')
      
      fig=plt.figure(figsize=(6,4),dpi=60)
      
      plt.plot(vul_inputs[:,0],vul_inputs[:,1:])
      plt.ylabel('Loss Ratio')
      plt.xlabel(selectedIM)
      
      canvas = FigureCanvasTkAgg(fig, master=f5)
      canvas.draw()
      canvas.get_tk_widget().grid(row=8,column=1,rowspan=6,columnspan=2,sticky="w")
      plt.close('all')
      
      return True     


btnPlot1_5=ttk.Button(f5,text="Plot function",command=lambda:button_plot_vul_frag(IM_tk_var.get(),vul_out_folder_tk_var.get(),propag_uncert_yes_no_tk_var.get())).grid(row=8,column=0,pady=scale_viewer_y*10,padx=scale_viewer_x*10)


#%% -------- Comparison TAB --------
label1_6=ttk.Label(f6,text="Computed function:").grid(row=0,column=0,pady=scale_viewer_y*(15,10),padx=scale_viewer_x*10)
computed_func_tk_var=tk.StringVar()
computed_func_tk_var.set("Please select a csv file")
entry1_6=ttk.Entry(f6,textvariable=computed_func_tk_var,style="E.TEntry",width=scale_viewer_x*45).grid(row=0,column=1,pady=scale_viewer_y*(15,10),padx=scale_viewer_x*10)
btnBrowse1_6=ttk.Button(f6, text="Browse",command=lambda:browse_csv_file("computed_func_tk_var")).grid(row=0,column=2,pady=scale_viewer_y*(15,10),padx=scale_viewer_x*10)

label2_6=ttk.Label(f6,text="Function to compare:").grid(row=0,column=3,pady=scale_viewer_y*(15,10),padx=scale_viewer_x*10)
func_to_compare_tk_var=tk.StringVar()
func_to_compare_tk_var.set("Please select a csv file")
entry2_6=ttk.Entry(f6,textvariable=func_to_compare_tk_var,style="E.TEntry",width=scale_viewer_x*45).grid(row=0,column=4,pady=scale_viewer_y*(15,10),padx=scale_viewer_x*10)
btnBrowse2_6=ttk.Button(f6, text="Browse",command=lambda:browse_csv_file("func_to_compare_tk_var")).grid(row=0,column=5,pady=scale_viewer_y*(15,10),padx=scale_viewer_x*10)

def button_plot_comparison(file1,file2):
     
      input1=np.loadtxt(file1,delimiter=',')
      input2=np.loadtxt(file2,delimiter=',')
      
      fig=plt.figure(figsize=(6,4),dpi=60)
      
      plt.plot(input1[:,0],input1[:,1:], label='original')
      plt.plot(input2[:,0],input2[:,1:],'--',label='comparison')
      plt.legend()
      plt.ylabel('PoE / Loss Ratio')
      plt.xlabel('IML')
      
      canvas = FigureCanvasTkAgg(fig, master=f6)
      canvas.draw()
      canvas.get_tk_widget().grid(row=1,column=6,rowspan=6,columnspan=2,sticky="w")
      plt.close('all')
      
      return True     

btnPlot1_6=ttk.Button(f6,text="Plot comparison",command=lambda:button_plot_comparison(computed_func_tk_var.get(),func_to_compare_tk_var.get())).grid(row=0,column=6,pady=scale_viewer_y*(15,10),padx=scale_viewer_x*10)


gem_frag_files=glob.glob(os.path.join(vmtk_root_dir,'validations','frag_vul_comparing_database','fragility','*.csv'))
gem_vul_files=glob.glob(os.path.join(vmtk_root_dir,'validations','frag_vul_comparing_database','vulnerability','*.csv'))


gem_frag_list=[]
gem_vul_list=[]

for i in range(len(gem_frag_files)):
      gem_frag_list.append(gem_frag_files[i].split('.')[0].split('/')[0].split('\\')[-1])
      
for i in range(len(gem_vul_files)):
      gem_vul_list.append(gem_vul_files[i].split('.')[0].split('/')[0].split('\\')[-1])

label3_6=ttk.Label(f6,text="GEM fragility function:").grid(row=1,column=0,pady=scale_viewer_y*10,padx=scale_viewer_x*10)

gem_frag_tk_var=tk.StringVar()
dropMenu1_6 = ttk.Combobox(f6,textvariable=gem_frag_tk_var,values=gem_frag_list,style="dropMenu.TCombobox")

label4_6=ttk.Label(f6,text="GEM vulnerability function:").grid(row=2,column=0,pady=scale_viewer_y*10,padx=scale_viewer_x*10)

gem_vul_tk_var=tk.StringVar()
dropMenu2_6 = ttk.Combobox(f6,textvariable=gem_vul_tk_var,values=gem_vul_list,style="dropMenu.TCombobox")



def plot_gem_func(build_class,path,row_pos,col_pos,type_func='frag'):
      
      filename=os.path.join(path,build_class+'.csv')
      
      IM,numerical_data=vld.read_gem_functions(filename)
      
      fig=plt.figure(figsize=(6,4),dpi=60)
      
      plt.plot(numerical_data[:,0],numerical_data[:,1:])
      plt.xlabel(IM+' [g]')
      
      if type_func=='frag':
            
            plt.ylabel('Probability of exceedance')
            plt.legend(['Slight damage','Moderate damage','Extensive damage','Complete damage'])
            
      elif type_func=='vul':
            
            plt.ylabel('Loss Ratio')
                  
      
      canvas = FigureCanvasTkAgg(fig, master=f6)
      canvas.draw()
      canvas.get_tk_widget().grid(row=int(row_pos),column=int(col_pos),rowspan=6,columnspan=2,sticky="w")
      plt.close('all')

      
      return True


btnPlot2_6=ttk.Button(f6,text="Plot function",command=lambda:plot_gem_func(dropMenu1_6.get(),os.path.join(vmtk_root_dir,'validations','frag_vul_comparing_database','fragility'),1,3,'frag')).grid(row=1,column=2,pady=scale_viewer_y*10,padx=scale_viewer_x*10)

btnPlot3_6=ttk.Button(f6,text="Plot function",command=lambda:plot_gem_func(dropMenu2_6.get(),os.path.join(vmtk_root_dir,'validations','frag_vul_comparing_database','vulnerability'),1,3,'vul')).grid(row=2,column=2,pady=scale_viewer_y*10,padx=scale_viewer_x*10)

dropMenu1_6.grid(row=1,column=1,pady=scale_viewer_y*10,padx=scale_viewer_x*10,sticky="w")
dropMenu2_6.grid(row=2,column=1,pady=scale_viewer_y*10,padx=scale_viewer_x*10,sticky="w")

# %% -------- Validation TAB --------

label1_7=ttk.Label(f7,text="Fragility/vulnerability array:").grid(row=0,column=0,pady=scale_viewer_y*(15,10),padx=scale_viewer_x*10)
func_tk_var=tk.StringVar()
func_tk_var.set("Please select a csv file")
entry1_7=ttk.Entry(f7,textvariable=func_tk_var,style="E.TEntry",width=scale_viewer_x*35).grid(row=0,column=1,pady=scale_viewer_y*(15,10),padx=scale_viewer_x*10)
btnBrowse1_7=ttk.Button(f7, text="Browse",command=lambda:browse_csv_file("func_tk_var")).grid(row=0,column=2,pady=scale_viewer_y*(15,10),padx=scale_viewer_x*10)


label2_7=ttk.Label(f7,text="Hazard curve array:").grid(row=0,column=3,pady=scale_viewer_y*(15,10),padx=scale_viewer_x*10)
hzd_curve_tk_var=tk.StringVar()
hzd_curve_tk_var.set("Please select a csv file")
entry2_7=ttk.Entry(f7,textvariable=hzd_curve_tk_var,style="E.TEntry",width=scale_viewer_x*35).grid(row=0,column=4,pady=scale_viewer_y*(15,10),padx=scale_viewer_x*10)
btnBrowse2_7=ttk.Button(f7, text="Browse",command=lambda:browse_csv_file("hzd_curve_tk_var")).grid(row=0,column=5,pady=scale_viewer_y*(15,10),padx=scale_viewer_x*10)

label3_7=ttk.Label(f7,text="Hazard return period:").grid(row=1,column=3,pady=scale_viewer_y*(10),padx=scale_viewer_x*10)
rtp_tk_var=tk.DoubleVar()
rtp_tk_var.set(1)
entry4_7=ttk.Entry(f7,textvariable=rtp_tk_var,style="E.TEntry",width=scale_viewer_x*10).grid(row=1,column=4,pady=scale_viewer_y*(10),padx=scale_viewer_x*10,sticky='e')

aal_tk_var=tk.DoubleVar()
entry3_7=ttk.Entry(f7,textvariable=aal_tk_var,style="E.TEntry",width=scale_viewer_x*20)
entry3_7.configure(state="disabled")

def button_compute_aal(frag_vul_file,hzd_curve_file,rtp):
      
      frag_vul_array=np.loadtxt(frag_vul_file,delimiter=',')
      hzd_array=np.loadtxt(hzd_curve_file,delimiter=',')
      
      aal_aapc=vld.aal_calc(frag_vul_array, hzd_array,rtp)
      
      aal_tk_var.set(aal_aapc)
      entry3_7.configure(state="enabled"),entry3_7.update()
      
      return aal_aapc

btnPlot1_7=ttk.Button(f7,text="Compute AAL",command=lambda:button_compute_aal(func_tk_var.get(),hzd_curve_tk_var.get(),rtp_tk_var.get())).grid(row=1,column=5,pady=scale_viewer_y*(10),padx=scale_viewer_x*10)
entry3_7.grid(row=1,column=6,pady=scale_viewer_y*(10),padx=scale_viewer_x*10)

label3_7=ttk.Label(f7,text="Vulnerabilty curves folder:").grid(row=2,column=0,pady=scale_viewer_y*(25,10),padx=scale_viewer_x*10)
vul_out_folder_tk_var=tk.StringVar()
vul_out_folder_tk_var.set("Please select a folder")
entry5_7=ttk.Entry(f7,textvariable=vul_out_folder_tk_var,style="E.TEntry",width=scale_viewer_x*45).grid(row=2,column=1,padx=scale_viewer_x*10,pady=scale_viewer_y*(25,10),sticky="w")
btnBrowse3_7 = ttk.Button(f7, text="Browse",command=lambda:browse_folder("vul_out_folder_tk_var")).grid(row=2,column=2,padx=scale_viewer_x*10,pady=scale_viewer_y*(25,10),sticky="w")

def button_plot_AALs(out_vul_folder,hzd_curve_file,rtp):
      
      vul_files=glob.glob(os.path.join(out_vul_folder,'*.csv'))
      
      hzd_array=np.loadtxt(hzd_curve_file,delimiter=',')
      labels=[]
      aal=[]
      
      for i in range(len(vul_files)):
            
            file=vul_files[i]
            
            temp=vul_files[i].split('/')
            temp2=temp[-1].split('\\')
            temp3=temp2[-1].split('.')
            
            labels.append(temp3[0])
            
            frag_vul_array=np.loadtxt(file,delimiter=',')
            aal_aapc=vld.aal_calc(frag_vul_array, hzd_array,rtp)
            aal.append(aal_aapc)
            
      fig=plt.figure(figsize=(8,5),dpi=60)
      ind = np.arange(len(labels))
      plt.bar(ind, np.array(aal)*100)
      plt.xticks(ind, labels)
      plt.xticks(rotation = 10)
      plt.ylabel('AAL [%]')
      
      canvas = FigureCanvasTkAgg(fig, master=f7)
      canvas.draw()
      canvas.get_tk_widget().grid(row=3,column=0,rowspan=6,columnspan=2,sticky="w")
      plt.close('all')
      
      
      return True


btnPlot7_7=ttk.Button(f7,text="Plot AALs",command=lambda:button_plot_AALs(vul_out_folder_tk_var.get(),hzd_curve_tk_var.get(),rtp_tk_var.get())).grid(row=2,column=3,pady=scale_viewer_y*(25,10),padx=scale_viewer_x*10)


# %%
#notebook.pack(expand=True)
notebook.grid(row=0,column=0)

#%%
root.mainloop()

