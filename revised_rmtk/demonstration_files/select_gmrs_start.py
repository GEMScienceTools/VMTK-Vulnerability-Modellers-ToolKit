# -*- coding: utf-8 -*-
"""
Created on Thu Jan  9 10:44:18 2020

@author: LuisMartins
"""

import numpy as np 
import os 
import random
import math

from itertools import repeat

#%%

def select_from_folder_with_imls(imls,folderpath,ngmrs_per_iml,min_scale_factor,max_scale_factor,period=[0]):
      
      files=os.listdir(folderpath)
      files_arr=np.array(files)
      imls=np.append(imls,99)
      
      ims_array=np.zeros([len(files),1])
      
      for i in range(len(files)):
            gmr=np.loadtxt(os.path.join(folderpath,files[i]),delimiter=',')
            Sd,Sa=NewmarkBeta(gmr[:,0],gmr[:,1]*9.81,period,0.05)
            ims_array[i]=Sa
      
      selected_gmrs_final=[]
      scale_factor_selected_gmrs_final=[]
      for i in range(len(imls)-1,0,-1):

            bool_array=(ims_array>imls[i-1]) & (ims_array<imls[i])
            subrecords=np.extract(bool_array,files_arr)
            
            if len(subrecords)>ngmrs_per_iml:
                  temp=random.sample(list(subrecords),k=ngmrs_per_iml)
                  temp2=list(repeat(1,ngmrs_per_iml))
                  for j in range(len(temp)):
                        selected_gmrs_final.append(temp[j])
                        scale_factor_selected_gmrs_final.append(temp2[j])
            else:
                  temp=list(subrecords)
                  temp2=list(repeat(1,len(subrecords)))
                  for j in range(len(temp)):
                        selected_gmrs_final.append(temp[j])
                        scale_factor_selected_gmrs_final.append(temp2[j])
                  bool_arr=(ims_array<imls[i])
                  scaled_records=np.extract(bool_arr,files_arr)
                  scaled_ims=np.extract(bool_arr,ims_array)*max_scale_factor
                  bool_array=(scaled_ims>imls[i-1]) & (scaled_ims<imls[i])
                  
                  subrecords_scaled=np.extract(bool_array,scaled_records)
                  
                  if bool_array.any() and np.sum(bool_array)>ngmrs_per_iml-len(subrecords):
                        temp=random.sample(list(subrecords_scaled),k=ngmrs_per_iml-len(subrecords))
                        temp2=list(repeat(max_scale_factor,ngmrs_per_iml-len(subrecords)))
                        
                  elif bool_array.any() and np.sum(bool_array)<ngmrs_per_iml-len(subrecords):
                        temp=list(subrecords_scaled)
                        temp2=list(repeat(max_scale_factor,len(subrecords_scaled)))
                        
                  for j in range(len(temp)):
                        selected_gmrs_final.append(temp[j])
                        scale_factor_selected_gmrs_final.append(temp2[j])

      return selected_gmrs_final, scale_factor_selected_gmrs_final

def export_selected_scaled_gmrs(folderpath,selected_gmrs,scale_factor_selected_gmrs,output_folder):
      
      for i in range(len(selected_gmrs)):
            gmr=np.loadtxt(os.path.join(folderpath,selected_gmrs[i]),delimiter=',')
            scale_factor=scale_factor_selected_gmrs[i]
            scaled_record=np.column_stack((gmr[:,0],gmr[:,1]*scale_factor))
            filename="scaled_record_"+str(i)+"_.csv"
            np.savetxt(os.path.join(output_folder,filename),scaled_record,delimiter=',')
      
      return True

def select_randomly_from_folder(folderpath,ngmrs):
      
      files=os.listdir(folderpath)
      selected_gmrs=random.sample(files,k=ngmrs)
      scale_factor_selected_gmrs=list(1 for i in range(ngmrs))
      
      return selected_gmrs, scale_factor_selected_gmrs

def NewmarkBeta(time, acc, T, damping):

    u0 = 0
    v0 = 0
    dt = time[1]-time[0]
    no_acc = len(acc)
    no_T = len(T)
    M = 1
    Sd = np.zeros(no_T)
    Sa = np.zeros(no_T)
    u = np.zeros(no_acc)
    a = np.zeros(no_acc)
    v = np.zeros(no_acc)
    at = np.zeros(no_acc)

    for i in range(no_T):
        if T[i] == 0:
            Sd[i] = 0
            Sa[i] = max(abs(np.array(acc)))/9.81
        else:
            wn = 2*math.pi/T[i]
            C = damping*2*M*wn
            K = ((2*math.pi)/T[i])**2*M
            u[0] = u0
            v[0] = v0
            a[0] = -acc[0]-C*v[0]-K*u[0]
            at[0] = acc[0]+a[0]
            for j in range(no_acc-1):
                u[j+1] = u[j] + dt*v[j] + dt**2 / 2*a[j]
                a[j+1] = (1/(M+dt*0.5*C)) * (-M*acc[j+1] - K*u[j+1] - C*(v[j]+dt*0.5*a[j]))
                v[j+1] = v[j] + dt*(0.5*a[j] + 0.5*a[j+1])
                at[j+1] = acc[j+1] + a[j+1]

            Sd[i] = max(abs(u))
            Sa[i] = max(abs(at))/9.81

    return Sd, Sa

#%%
    
