# -*- coding: utf-8 -*-
"""
Created on Thu Jan  9 10:44:18 2020

@author: LuisMartins
"""

import numpy as np 
import os 
import random
import math

from itertools import repeat

#%%

def select_from_folder_with_imls(IM,imls,folderpath,ngmrs_per_iml,min_scale_factor,max_scale_factor,period=0):
      
      files=os.listdir(folderpath)
      files_arr=np.array(files)
      imls=np.append(imls,99)
      
      ims_array=np.zeros([len(files),1])
      
      for i in range(len(files)):
            gmr=np.loadtxt(os.path.join(folderpath,files[i]),delimiter=',')
            Sd,Sa=NewmarkBeta(gmr[:,0],gmr[:,1],period,0.05)
            ims_array[i]=Sa
      
      selected_gmrs=[]
      scale_factor_selected_gmrs=[]
      
      for i in range(len(imls),0,-1):
            subrecords=files_arr[(ims_array>imls[i]) & (ims_array<imls[i+1])]
            
            if len(subrecords)>ngmrs_per_iml:
                  selected_gmrs.append(random.sample(list(subrecords),k=ngmrs_per_iml))
                  scale_factor_selected_gmrs.append(list(repeat(1,ngmrs_per_iml)))
            else:
                  selected_gmrs.append(list(subrecords))
                  scaled_records=files_arr[(ims_array<imls[i])]
                  scaled_ims=ims_array[(ims_array<imls[i])]*max_scale_factor
                  
                  subrecords_scaled=scaled_records[(scaled_ims>imls[i]) & (scaled_ims<imls[i+1])]
                  
                  if scaled_ims.any():
                        selected_gmrs.append(random.sample(list(subrecords_scaled),k=ngmrs_per_iml-len(subrecords)))
                        scale_factor_selected_gmrs.append(list(repeat(max_scale_factor,ngmrs_per_iml-len(subrecords))))
      
      return selected_gmrs, scale_factor_selected_gmrs

def export_selected_scaled_gmrs(folderpath,selected_gmrs,scale_factor_selected_gmrs,output_folder):
      
      for i in range(len(selected_gmrs)):
            for j in range(len(selected_gmrs[i])):
                  gmr=np.loadtxt(os.path.join(folderpath,selected_gmrs[i][j]),delimiter=',')
                  scale_factor=scale_factor_selected_gmrs[i][j]
                  scaled_record=np.column_stack((gmr[:,0],gmr[:,1]*scale_factor))
                  filename="scaled_record_"+str(i)+"_"+str(j)+".csv"
                  np.savetxt(os.path.join(output_folder,filename),scaled_record,delimiter=',')
      
      return True

def select_randomly_from_folder(folderpath,ngmrs):
      
      files=os.listdir(folderpath)
      selected_gmrs=random.sample(files,k=ngmrs)
      scale_factor_selected_gmrs=list(1 for i in range(ngmrs))
      
      return selected_gmrs, scale_factor_selected_gmrs

def NewmarkBeta(time, acc, T, damping):

    u0 = 0
    v0 = 0
    dt = time[1]-time[0]
    no_acc = len(acc)
    no_T = len(T)
    M = 1
    Sd = np.zeros(no_T)
    Sa = np.zeros(no_T)
    u = np.zeros(no_acc)
    a = np.zeros(no_acc)
    v = np.zeros(no_acc)
    at = np.zeros(no_acc)

    for i in range(no_T):
        if T[i] == 0:
            Sd[i] = 0
            Sa[i] = max(abs(np.array(acc)))
        else:
            wn = 2*math.pi/T[i]
            C = damping*2*M*wn
            K = ((2*math.pi)/T[i])**2*M
            u[0] = u0
            v[0] = v0
            a[0] = -acc[0]-C*v[0]-K*u[0]
            at[0] = acc[0]+a[0]
            for j in range(no_acc-1):
                u[j+1] = u[j] + dt*v[j] + dt**2 / 2*a[j]
                a[j+1] = (1/(M+dt*0.5*C)) * (-M*acc[j+1] - K*u[j+1] - C*(v[j]+dt*0.5*a[j]))
                v[j+1] = v[j] + dt*(0.5*a[j] + 0.5*a[j+1])
                at[j+1] = acc[j+1] + a[j+1]

            Sd[i] = max(abs(u))
            Sa[i] = max(abs(at))/9.81

    return Sd, Sa

#%%
    
