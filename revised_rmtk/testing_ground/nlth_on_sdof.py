# -*- coding: utf-8 -*-
"""
Created on Fri Jan 17 08:55:51 2020

@author: LuisMartins
"""

import openseespy.opensees as ops
import numpy as np
#%%

def run_nlth_analysis_on_sdof_ops_py(capacity_curve,gmr,damping,degradation):
      
      ops.wipe()
      ops.model('basic','-ndm',1,'-ndf',1)
      
      d_cap=capacity_curve[:,0]
      f_cap=capacity_curve[:,1]*9.81
      
      f_vec=np.zeros([5,1])
      d_vec=np.zeros([5,1])
      if len(f_cap)==3:
            #bilinear curve
            f_vec[1]=f_cap[1]
            f_vec[4]=f_cap[-1]
            
            d_vec[1]=d_cap[1]
            d_vec[4]=d_cap[-1]
            
            d_vec[2]=d_vec[1]+(d_vec[5]-d_vec[1])/3
            d_vec[3]=d_vec[1]+2*((d_vec[5]-d_vec[1])/3)
            
            f_vec[2]=np.interp(d_vec[2],d_cap,f_cap)
            f_vec[3]=np.interp(d_vec[3],d_cap,f_cap)
            
      elif len(f_cap)==4:
            
            f_vec[1]=f_cap[1]
            f_vec[4]=f_cap[-1]
            
            d_vec[1]=d_cap[1]
            d_vec[4]=d_cap[-1]
            
            f_vec[2]=f_cap[2]
            d_vec[2]=d_cap[2]
            
            d_vec[3]=np.mean([d_vec[2],d_vec[-1]])
            f_vec[3]=np.interp(d_vec[3],d_cap,f_cap)
            
      elif len(f_cap)==5:
            f_vec[1]=f_cap[1]
            f_vec[4]=f_cap[-1]
            
            d_vec[1]=d_cap[1]
            d_vec[4]=d_cap[-1]
            
            f_vec[2]=f_cap[2]
            d_vec[2]=d_cap[2]
            
            f_vec[3]=f_cap[3]
            d_vec[3]=d_cap[3]
      
      matTag_pinching=10
      if degradation==True:
            matargs=[f_vec[1,0],d_vec[1,0],f_vec[2,0],d_vec[2,0],f_vec[3,0],d_vec[3,0],f_vec[4,0],d_vec[4,0],
                                 -1*f_vec[1,0],-1*d_vec[1,0],-1*f_vec[2,0],-1*d_vec[2,0],-1*f_vec[3,0],-1*d_vec[3,0],-1*f_vec[4,0],-1*d_vec[4,0],
                                 0.5,0.25,0.05,
                                 0.5,0.25,0.05,
                                 0,0.1,0,0,0.2,
                                 0,0.1,0,0,0.2,
                                 0,0.4,0,0.4,0.9,
                                 10,'energy']
            
      else:
            matargs=[f_vec[1,0],d_vec[1,0],f_vec[2,0],d_vec[2,0],f_vec[3,0],d_vec[3,0],f_vec[4,0],d_vec[4,0],
                                 -1*f_vec[1,0],-1*d_vec[1,0],-1*f_vec[2,0],-1*d_vec[2,0],-1*f_vec[3,0],-1*d_vec[3,0],-1*f_vec[4,0],-1*d_vec[4,0],
                                 0.5,0.25,0.05,
                                 0.5,0.25,0.05,
                                 0,0,0,0,0,
                                 0,0,0,0,0,
                                 0,0,0,0,0,
                                 10,'energy']
            
      ops.uniaxialMaterial('Pinching4', matTag_pinching,*matargs)
      matTag_minmax=int(matTag_pinching/10)
      ops.uniaxialMaterial('MinMax', matTag_minmax,matTag_pinching, '-min',-1*d_vec[4,0], '-max', d_vec[4,0])
      
      mx=1
      kx=f_vec[1,0]/d_vec[1,0]
      omega=np.sqrt(kx/mx)
      dt=gmr[1,0]-gmr[0,0]
      
      ops.node(1,0)
      ops.node(2,0,'-mass',float(mx))
      ops.fix(1,1)
      ops.element('zeroLength', 1, 1, 2, "-mat", matTag_minmax, "-dir", 1) 
      
      gmr_values=gmr[:,1]*9.81
      gmr_times=gmr[:,0]
      ops.timeSeries('Path', 2,'-values',*gmr_values,'-time',*gmr_times)
      ops.pattern('UniformExcitation',2,1,'-accel',2)

      ops.constraints('Plain')
      ops.numberer('RCM')
      ops.test('NormDispIncr',1e-6,50)
      ops.algorithm('Newton')
      ops.system('BandGeneral')
      ops.integrator('Newmark',0.5,0.25)
      ops.analysis('Transient')
      
      t_final=gmr[-1,0]
      t_current=ops.getTime()
      ok=0
      
      time= [t_current]
      disps=[0.0]
      accels=[0.0]
      ops.rayleigh(0,0,damping*2.0/omega,0)

      while ok == 0 and t_current < t_final:
            ok=ops.analyze(1,dt)
            if ok !=0:
                  print("regular newton failed .. lets try an initail stiffness for this step")
                  ops.test('NormDispIncr',1.0e-6,100,0)
                  ops.algorithm('ModifiedNewton', '-initial')
                  ok=ops.analyze(1,dt)
                  if ok!=0:
                        print("reducing dt by 10")
                        ndt=dt/10
                        ok=ops.analyze(10,ndt)
                  if ok==0:
                        print("that worked.. back to regular settings")
                        ops.test('NormDispIncr',1e-6,50)
                        ops.test('NormDispIncr',1e-6,50)
            t_current = ops.getTime()
            time.append(t_current)
            disps.append(ops.nodeDisp(2,1))
            accels.append(ops.nodeAccel(2,1))
      
      if ok!=0:
            print('NLTHA did not converge!')
      
      
      return time,disps,accels

#%%
      
