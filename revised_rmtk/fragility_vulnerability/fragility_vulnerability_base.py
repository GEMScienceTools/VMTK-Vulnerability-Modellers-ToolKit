# -*- coding: utf-8 -*-
"""
Created on Mon Oct 21 15:29:54 2019

@author: LuisMartins
"""

import numpy as np
import math 
import os
# %%
class Fragility:
      
      # The fragility object is defined by its IM and damage states
      
      def __init__(self,IM,damage_state,type_of_curve,regression_model):
            
            # IM - instensity measure
            # damage_state - damage states of the frag model
            # type_of_curve - continuous vs discrete
            # regression model (eg. lognornal)
            self.IM=None
            self.damage_state=None
            self.type_of_curve=None
            self.regression_model=None
            
      @property
      def IM(self):
            return self.IM
      
      @property
      def damage_state(self):
            return self.damage_state
      
      @property
      def type_of_curve(self):
            return self.type_of_curve
      
      @property
      def regression_model(self):
            return self.regression_model
      
# %%
class Vulnerability:
      
      # The fragility object is defined by its IM and damage states
      
      def __init__(self,IM,uncertainty):
            self.IM=None
            self.uncertainty=None
            
      @property
      def IM(self):
            return self.IM
      
      @property
      def uncertainty(self):
            return self.uncertainty
      
# %%
def calculate_sigma_loss(mean_loss_ratio):
      
      # calculates the sigma in loss estimates according to:
      # Silva, V. (2019) Uncertainty and correlation in seismic vulnerability 
      # functions of building classes. Earthquake Spectra. 
      # DOI: 10.1193/013018eqs031m.
      
      if mean_loss_ratio==0:
            sigma_loss_ratio=np.array([0])
      elif mean_loss_ratio==1:
            sigma_loss_ratio=np.array([1])
      else:
            sigma_loss_ratio=np.sqrt(mean_loss_ratio*(-0.7-2*mean_loss_ratio+np.sqrt(6.8*mean_loss_ratio+0.5)))
            
      # calculates a and b parameters for beta distribution
      
      a_beta_dist=((1-mean_loss_ratio)/sigma_loss_ratio**2-(1/mean_loss_ratio))*mean_loss_ratio**2
      b_beta_dist=a_beta_dist*((1/mean_loss_ratio)-1)
      
      return sigma_loss_ratio, a_beta_dist,b_beta_dist

# %%

