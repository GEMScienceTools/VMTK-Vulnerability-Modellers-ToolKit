# import dependencies 
import os

import tkinter as tk
import tkinter.messagebox
from tkinter import ttk
from tkinter import filedialog
from tkinter.ttk import Notebook

import matplotlib
matplotlib.use("TkAgg")
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from matplotlib.figure import Figure

import numpy as np
import pandas as pd

#%% general functions and classes for GUI

def browse_folder(tkvar):
    folder_selected = filedialog.askdirectory()
    tkvar_str=str(tkvar)
    eval(tkvar_str+".set(folder_selected)")
    return folder_selected

def browse_file(tkvar):
    file_selected = filedialog.askopenfilename()
    tkvar_str=str(tkvar)
    eval(tkvar_str+".set(file_selected)")
    return file_selected

def browse_csv_file(tkvar):
    file_selected = filedialog.askopenfilename(filetypes = (("csv files","*.csv"),("all files","*.*")))
    tkvar_str=str(tkvar)
    eval(tkvar_str+".set(file_selected)")
    return file_selected

def button_plot_chart():
    return True

def button_save_results():
    return True

def button_run_process():
    return True

def button_save_nparray_csv_file(np_array_to_save):
    filename=filedialog.asksaveasfile(defaultextension=".csv")
    np.savetxt(filename,np_array_to_save,delimiter=",")
    return True

def button_save_dataframe_csv_file(pd_dataframe_to_save):
    filename=filedialog.asksaveasfile(defaultextension=".csv")
    pd_dataframe_to_save.to_csv(filename,index=False)
    return True

#%% Start window
root=tk.Tk()
root.title('GEM - Risk Modellers ToolKit')
root.iconbitmap(os.path.join(os.getcwd(),'figs','GEM-LOGO-Red-CS3-square.ico'))

width_screen = root.winfo_screenwidth()
height_screen = root.winfo_screenheight()
root.geometry("1280x720")

#%% ttk styles

boldBtnStyle = ttk.Style ()
boldBtnStyle.configure("Bold.TButton", font = ('Sans','10','bold'))

runBtnStyle=ttk.Style()
runBtnStyle.configure("Run.TButton",font= ('Sans','16','normal'))

entryStyle=ttk.Style()
entryStyle.configure("E.TEntry",foreground="gray40")

radioBtnJust=ttk.Style()
radioBtnJust.configure("RBJust.TRadiobutton",justify='left')

labelJustLft=ttk.Style()
labelJustLft.configure("LbJustLft.TLabel",justify='left')


#%% ttk NoteBook

notebook = ttk.Notebook(root,width=int(0.95*1280),height=int(0.95*720))

f1 = ttk.Frame(notebook,width=int(0.90*1280),height=int(0.90*720))
f2 = ttk.Frame(notebook,width=int(0.90*1280),height=int(0.90*720))
f3 = ttk.Frame(notebook,width=int(0.90*1280),height=int(0.90*720))
f4 = ttk.Frame(notebook,width=int(0.90*1280),height=int(0.90*720))
f5 = ttk.Frame(notebook,width=int(0.90*1280),height=int(0.90*720))
f6 = ttk.Frame(notebook,width=int(0.90*1280),height=int(0.90*720))
f7 = ttk.Frame(notebook,width=int(0.90*1280),height=int(0.90*720))

notebook.add(f1, text='Demand')
notebook.add(f2, text='Capacity')
notebook.add(f3, text='Structural Response')
notebook.add(f4, text='Fragility Analysis')
notebook.add(f5, text='Vulnerability Analysis')
notebook.add(f6, text='Compare Results')
notebook.add(f7, text='Verify Results')

#%% ------ DEMAND TAB -----

# list of records and IM
label1_1=ttk.Label(f1,text="Location of ground \nmotion records:",style="LbJustLft.TLabel").grid(row=0,column=0,pady=(15,50),sticky="w")
gmrs_location_folderPath_tk_var = tk.StringVar()
gmrs_location_folderPath_tk_var.set("Please select a folder")
entry1_1 = ttk.Entry(f1,textvariable=gmrs_location_folderPath_tk_var,style="E.TEntry",width=50).grid(row=0,column=1,pady=(15,50),padx=10)
btnBrowse1_1 = ttk.Button(f1, text="Browse",command=lambda:browse_folder("gmrs_location_folderPath_tk_var"))
btnBrowse1_1.grid(row=0,column=2,pady=(15,50))

label2_1=ttk.Label(f1,text="Intensity measure").grid(row=0,column=3,padx=10,pady=(15,50),sticky="e")
IMs = ['PGA','SA(0.2s)','SA(0.3s)','SA(0.5s)','SA(0.6s)','SA(1.0s)','SA(2.0s)']
IM_tk_var = tk.StringVar()
IM_tk_var.set('PGA') # set the default option
dropMenu1_1 = ttk.Combobox(f1,textvariable=IM_tk_var,values=IMs).grid(row=0,column=4,pady=(15,50))
# options based on radio button selection
label3_1=ttk.Label(f1,text="Intensity measure levels").grid(row=3,column=0,sticky="e")
imls_entry_tk_var=tk.StringVar()
imls_entry_tk_var.set("Please insert IMLs separated by commas")
entry2_1 = ttk.Entry(f1,textvariable=imls_entry_tk_var,style="E.TEntry",width=50)
entry2_1.configure(state='disabled')

label3_1=ttk.Label(f1,text="Number of records per IML").grid(row=3,column=3,sticky="e")
no_gmrs_entry_tk_var=tk.IntVar()
entry3_1 = ttk.Entry(f1,textvariable=no_gmrs_entry_tk_var,style="E.TEntry",width=5)
entry3_1.configure(state='disabled')

label4_1=ttk.Label(f1,text="Min scaling factor").grid(row=4,column=0,sticky="e")
min_scale_factor_entry_tk_var=tk.DoubleVar()
entry4_1 = ttk.Entry(f1,textvariable=min_scale_factor_entry_tk_var,style="E.TEntry",width=5)
entry4_1.configure(state='disabled')

label5_1=ttk.Label(f1,text="Max scaling factor").grid(row=4,column=3,sticky="e")
max_scale_factor_entry_tk_var=tk.DoubleVar()
entry5_1 = ttk.Entry(f1,textvariable=max_scale_factor_entry_tk_var,style="E.TEntry",width=5)
entry5_1.configure(state='disabled')

label6_1=ttk.Label(f1,text="Intensity measure levels").grid(row=6,column=0,sticky="e")
imls_entry_tk_var=tk.StringVar()
imls_entry_tk_var.set("Please insert IMLs separated by commas")
entry6_1 = ttk.Entry(f1,textvariable=imls_entry_tk_var,style="E.TEntry",width=50)
entry6_1.configure(state='disabled')

label7_1=ttk.Label(f1,text="Hazard curve file:").grid(row=7,column=0,pady=10,sticky="e")
hzd_curve_filePath_tk_var = tk.StringVar()
hzd_curve_filePath_tk_var.set("Please select a file")
entry7_1 = ttk.Entry(f1,textvariable=hzd_curve_filePath_tk_var,style="E.TEntry",width=50)
entry7_1.configure(state='disabled')

btnBrowse1_1= ttk.Button(f1, text="Browse",command=lambda:browse_file("hzd_curve_filePath_tk_var"))
btnBrowse1_1.configure(state='disabled')

label8_1=ttk.Label(f1,text="Hazard disaggregation file:").grid(row=8,column=0,pady=10,sticky="e")
hzd_disag_filePath_tk_var = tk.StringVar()
hzd_disag_filePath_tk_var.set("Please select a file")
entry8_1 = ttk.Entry(f1,textvariable=hzd_disag_filePath_tk_var,style="E.TEntry",width=50)
entry8_1.configure(state='disabled')

btnBrowse2_1 = ttk.Button(f1, text="Browse",command=lambda:browse_file("hzd_disag_filePath_tk_var"))
btnBrowse2_1.configure(state='disabled')

# radio button with options
def rad_button_enable(value):
      if value==1:
            btnBrowse1_1.configure(state='disabled');btnBrowse1_1.update()
            btnBrowse2_1.configure(state='disabled');btnBrowse2_1.update()
            entry2_1.configure(state='disabled'); entry2_1.update()
            entry3_1.configure(state='disabled'); entry3_1.update()
            entry4_1.configure(state='disabled'); entry4_1.update()
            entry5_1.configure(state='disabled'); entry5_1.update()
            entry6_1.configure(state='disabled'); entry6_1.update()
            entry7_1.configure(state='disabled'); entry7_1.update()
            entry8_1.configure(state='disabled'); entry8_1.update()
      elif value==2:
            entry2_1.configure(state='normal'); entry2_1.update()
            entry3_1.configure(state='normal'); entry3_1.update()
            entry4_1.configure(state='normal'); entry4_1.update()
            entry5_1.configure(state='normal'); entry5_1.update()
            
            entry6_1.configure(state='disabled'); entry6_1.update()
            entry7_1.configure(state='disabled'); entry7_1.update()
            entry8_1.configure(state='disabled'); entry8_1.update()
            btnBrowse1_1.configure(state='disabled');btnBrowse1_1.update()
            btnBrowse2_1.configure(state='disabled');btnBrowse2_1.update()
      elif value==3:
            entry6_1.configure(state='normal'); entry6_1.update()
            entry7_1.configure(state='normal'); entry7_1.update()
            entry8_1.configure(state='normal'); entry8_1.update()
            btnBrowse1_1.configure(state='normal'); btnBrowse1_1.update()
            btnBrowse2_1.configure(state='normal'); btnBrowse2_1.update()
            
            entry2_1.configure(state='disabled'); entry2_1.update()
            entry3_1.configure(state='disabled'); entry3_1.update()
            entry4_1.configure(state='disabled'); entry4_1.update()
            entry5_1.configure(state='disabled'); entry5_1.update()
      else:
            return False
      return True

radio_var=tk.IntVar()
radio_var.set("1")
ttk.Radiobutton(f1,text="Use all records",style="RBJust.TRadiobutton",variable=radio_var,value=1,command=lambda:rad_button_enable(1)).grid(row=1,column=0,sticky = 'w')
ttk.Radiobutton(f1,text="Select records based \non range of IMs",style="RBJust.TRadiobutton",variable=radio_var,value=2,command=lambda:rad_button_enable(2)).grid(row=2,column=0,sticky = 'w')
ttk.Radiobutton(f1,text="Select records based \non conditional spectrum method",style="RBJust.TRadiobutton",variable=radio_var,value=3,command=lambda:rad_button_enable(3)).grid(row=5,column=0,sticky = 'w')

# grid all the elements
entry2_1.grid(row=3,column=1,pady=10,padx=10)
entry3_1.grid(row=3,column=4,pady=10,padx=10)
entry4_1.grid(row=4,column=1,pady=10,padx=10,sticky="w")
entry5_1.grid(row=4,column=4,pady=10,padx=10)
entry6_1.grid(row=6,column=1,pady=10,padx=10)
entry7_1.grid(row=7,column=1,pady=10,padx=10)
entry8_1.grid(row=8,column=1,pady=10,padx=10)
btnBrowse1_1.grid(row=7,column=2)
btnBrowse2_1.grid(row=8,column=2)

# plot and save data
label9_1=ttk.Label(f1,text="Output directory:").grid(row=9,column=0,pady=(50,10),sticky="w")
out_demand_folderPath_tk_var = tk.StringVar()
out_demand_folderPath_tk_var.set("Please select a folder")
entry9_1 = ttk.Entry(f1,textvariable=out_demand_folderPath_tk_var,style="E.TEntry",width=50).grid(row=9,column=1,pady=(50,10),padx=10)
btnBrowse3_1 = ttk.Button(f1, text="Browse",command=lambda:browse_folder("out_demand_folderPath_tk_var"))
btnBrowse3_1.grid(row=9,column=2,pady=(50,10))

label10_1=ttk.Label(f1,text="Min T [s]").grid(row=10,column=0,pady=10,sticky="e")
min_T_entry_tk_var=tk.DoubleVar()
entry9_1 = ttk.Entry(f1,textvariable=min_T_entry_tk_var,style="E.TEntry",width=5).grid(row=10,column=1,padx=10,pady=10,sticky="w")

label11=ttk.Label(f1,text="Max T [s]").grid(row=11,column=0,pady=10,sticky="e")
max_T_entry_tk_var=tk.DoubleVar()
entry10 = ttk.Entry(f1,textvariable=max_T_entry_tk_var,style="E.TEntry",width=5).grid(row=11,column=1,padx=10,pady=10,sticky="w")

label11_1=ttk.Label(f1,text="Step T").grid(row=12,column=0,pady=10,sticky="e")
step_T_entry_tk_var=tk.DoubleVar()
entry11 = ttk.Entry(f1,textvariable=step_T_entry_tk_var,style="E.TEntry",width=5).grid(row=12,column=1,padx=10,pady=10,sticky="w")

btnPlot1_1=ttk.Button(f1,text="Plot spectra",command=button_plot_chart)
btnPlot1_1.grid(row=13,column=0,sticky="e")

btnSaveRes1_1=ttk.Button(f1,text="Save results to folder",command=button_save_results,style = "Bold.TButton")
btnSaveRes1_1.grid(row=14,column=0,sticky="e",pady=(10,10))
#%% ------ Capacity TAB ----

# radio button with options
label1_2=ttk.Label(f2,text="Building class tag:").grid(row=1,column=0,padx=10,pady=10,sticky="e")
build_class_str_tk_var= tk.StringVar()
entry1_2 = ttk.Entry(f2,textvariable=build_class_str_tk_var,style="E.TEntry",width=10)
entry1_2.configure(state="normal")

label2_2=ttk.Label(f2,text="Type of model:").grid(row=1,column=2,padx=10,pady=10)
types_of_capacity = ['Bilinear','Trilinear','Quadrilinear']
types_of_capacity_tk_var=tk.StringVar()
types_of_capacity_tk_var.set('Bilinear') # set the default option
dropMenu1_2 = ttk.Combobox(f2,textvariable=types_of_capacity_tk_var,values=types_of_capacity)
dropMenu1_2.configure(state="normal")

label3_2=ttk.Label(f2,text="List of Sds [m]").grid(row=1,column=4,padx=10,pady=10)
list_of_sds_cap_tk_var=tk.StringVar()
list_of_sds_cap_tk_var.set("Please insert values separated by commas")
entry2_2=ttk.Entry(f2,textvariable=list_of_sds_cap_tk_var,style="E.TEntry",width=37)
entry2_2.configure(state="normal")

label4_2=ttk.Label(f2,text="List of Sas [g]").grid(row=1,column=6,padx=10,pady=10)
list_of_sas_cap_tk_var=tk.StringVar()
list_of_sas_cap_tk_var.set("Please insert values separated by commas")
entry3_2=ttk.Entry(f2,textvariable=list_of_sas_cap_tk_var,style="E.TEntry",width=37)
entry3_2.configure(state="normal")

label5_2=ttk.Label(f2,text="Capacity curves file:").grid(row=3,column=0,padx=10,pady=10,sticky="e")
cap_curves_filePath_tk_var = tk.StringVar()
cap_curves_filePath_tk_var.set("Please select a csv file")
entry4_2 = ttk.Entry(f2,textvariable=cap_curves_filePath_tk_var,style="E.TEntry",width=107)
btnBrowse1_2=ttk.Button(f2, text="Browse",command=lambda:browse_csv_file("cap_curves_filePath_tk_var"))
entry4_2.configure(state="disabled")
btnBrowse1_2.configure(state="disabled")

label6_2=ttk.Label(f2,text="Capacity curves folder:").grid(row=5,column=0,padx=10,pady=(10,50),sticky="e")
cap_curves_folderPath_tk_var = tk.StringVar()
cap_curves_folderPath_tk_var.set("Please select folder")
entry5_2 = ttk.Entry(f2,textvariable=cap_curves_folderPath_tk_var,style="E.TEntry",width=107)
btnBrowse2_2=ttk.Button(f2, text="Browse",command=lambda:browse_folder("cap_curves_folderPath_tk_var"))
entry5_2.configure(state="disabled")
btnBrowse2_2.configure(state="disabled")

def rad_button_enable_2(value):
      if value==1:
            btnBrowse1_2.configure(state='disabled');btnBrowse1_2.update()
            btnBrowse2_2.configure(state='disabled');btnBrowse2_2.update()
            entry4_2.configure(state='disabled'); entry4_2.update()
            entry5_2.configure(state='disabled'); entry5_2.update()
            entry1_2.configure(state="normal"); entry1_2.update()
            entry2_2.configure(state="normal"); entry2_2.update()
            entry3_2.configure(state="normal"); entry2_2.update()
            dropMenu1_2.configure(state="normal");dropMenu1_2.update()
      elif value==2:
            entry1_2.configure(state="disabled"); entry1_2.update()
            entry2_2.configure(state="disabled"); entry2_2.update()
            entry3_2.configure(state="disabled"); entry2_2.update()
            dropMenu1_2.configure(state="disabled");dropMenu1_2.update()
            btnBrowse2_2.configure(state='disabled');btnBrowse2_2.update()
            entry5_2.configure(state='disabled'); entry5_2.update()
            btnBrowse1_2.configure(state='normal');btnBrowse1_2.update()
            entry4_2.configure(state='normal'); entry4_2.update()
      elif value==3:
            entry1_2.configure(state="disabled"); entry1_2.update()
            entry2_2.configure(state="disabled"); entry2_2.update()
            entry3_2.configure(state="disabled"); entry2_2.update()
            dropMenu1_2.configure(state="disabled");dropMenu1_2.update()
            entry4_2.configure(state='disabled'); entry4_2.update()
            btnBrowse1_2.configure(state='disabled');btnBrowse1_2.update()
            btnBrowse2_2.configure(state='normal');btnBrowse2_2.update()
            entry5_2.configure(state='normal'); entry5_2.update()
      else:
            return False
      return True

radio_var1_2=tk.IntVar()
radio_var1_2.set("1")
ttk.Radiobutton(f2,text="Input a single capacity curve",style="RBJust.TRadiobutton",variable=radio_var1_2,value=1,command=lambda:rad_button_enable_2(1)).grid(row=0,column=0,sticky = 'w',pady=(15,0),columnspan=5)
ttk.Radiobutton(f2,text="Load single or multiple capacity curves for single building class",style="RBJust.TRadiobutton",variable=radio_var1_2,value=2,command=lambda:rad_button_enable_2(2)).grid(row=2,column=0,sticky = 'w',columnspan=5)
ttk.Radiobutton(f2,text="Load single or multiple capacity curves for multiple building classs",style="RBJust.TRadiobutton",variable=radio_var1_2,value=3,command=lambda:rad_button_enable_2(3)).grid(row=4,column=0,sticky = 'w',columnspan=5)

# grid all widgets
entry1_2.grid(row=1,column=1,pady=10,padx=10,sticky="w")
dropMenu1_2.grid(row=1,column=3,pady=10,padx=10)
entry2_2.grid(row=1,column=5,padx=10,pady=10)
entry3_2.grid(row=1,column=7,padx=10,pady=10)
entry4_2.grid(row=3,column=1,padx=10,pady=10,columnspan=5,sticky="w")
btnBrowse1_2.grid(row=3,column=6,padx=10,pady=10)
entry5_2.grid(row=5,column=1,padx=10,pady=(10,50),columnspan=5,sticky="w")
btnBrowse2_2.grid(row=5,column=6,padx=10,pady=(10,50))

#%%------ Structural Response TAB ----

label1_3=ttk.Label(f3,text="Path to OpenSees:").grid(row=0,column=0,pady=(15,15),padx=10)
opensees_path_tk_var=tk.StringVar()
opensees_path_tk_var.set("Please browse to OpenSees")
entry1_3=ttk.Entry(f3,textvariable=opensees_path_tk_var,width=50,style="E.TEntry").grid(row=0,column=1,padx=10,pady=(15,15),sticky="w", columnspan=3)
btnBrowse1_3 = ttk.Button(f3, text="Browse",command=lambda:browse_folder("opensees_path")).grid(row=0,column=4,padx=(15,15),pady=10)

label2_3=ttk.Label(f3,text="Damping ratio:",style="LbJustLft.TLabel").grid(row=1,column=0,pady=10,padx=10,sticky="w")
damp_ratio_tk_var=tk.DoubleVar()
entry2_3=ttk.Entry(f3,textvariable=damp_ratio_tk_var,width=10,style="E.TEntry").grid(row=1,column=1,padx=10,pady=10,sticky="w")

label3_3=ttk.Label(f3,text="Degradation:").grid(row=1,column=2,padx=10,pady=10,sticky="w")
degrad_type=["Energy"]
degrad_type_tk_var=tk.StringVar()
degrad_type_tk_var.set('Energy') # set the default option
dropMenu1_3 = ttk.Combobox(f3,textvariable=degrad_type_tk_var,values=degrad_type).grid(row=1,column=3,padx=10,pady=10,sticky="e")

label4_3=ttk.Label(f3,text="EDPs:").grid(row=1,column=4,padx=10,pady=10)
max_displ_yes_no_tk_var = tk.IntVar()
max_displ_yes_no_tk_var.set(0)
checkBox1_3 = ttk.Checkbutton(f3, variable=max_displ_yes_no_tk_var, onvalue=1, offvalue=0, text="Max displ.").grid(row=1,column=5,padx=10,pady=10)

max_accel_yes_no_tk_var = tk.IntVar()
max_accel_yes_no_tk_var.set(0)
checkBox2_3 = ttk.Checkbutton(f3, variable=max_accel_yes_no_tk_var, onvalue=1, offvalue=0, text="Max accel.").grid(row=1,column=6,padx=10,pady=10,sticky="e")

label5_3=ttk.Label(f3,text="Output directory:").grid(row=2,column=0,pady=10,sticky="w")
out_struct_response_folderPath_tk_var = tk.StringVar()
out_struct_response_folderPath_tk_var.set("Please select a folder")
entry3_3 = ttk.Entry(f3,textvariable=out_struct_response_folderPath_tk_var,style="E.TEntry",width=50).grid(row=2,column=1,pady=10,padx=10,columnspan=3,sticky="w")
btnBrowse2_3 = ttk.Button(f3, text="Browse",command=lambda:browse_folder("folderPath1_3")).grid(row=2,column=4,padx=10,pady=10)

btnRun1_3=ttk.Button(f3,text="Start "+u"\u2bc8",command=button_run_process,style="Run.TButton").grid(row=2,column=6,pady=10,padx=10,rowspan=2,sticky="e")
progress1_3 = ttk.Progressbar(f3, orient ="horizontal",length =275, mode = 'determinate').grid(row=4,column=4,columnspan=3,sticky="e",pady=(10,50),padx=10) 


#%%----- Fragility TAB ----

label1_4=ttk.Label(f4,text="Regression method").grid(row=0,column=0,pady=(15,15),padx=10)
reg_method=["MLE-Censored", "MLE-Uncensored"]
reg_method_tk_var=tk.StringVar()
reg_method_tk_var.set("MLE-Uncensored")

censor_factor_tk_var=tk.DoubleVar()
entry1_4 = ttk.Entry(f4,textvariable=censor_factor_tk_var,style="E.TEntry",width=50)
#entry1_4.configure(state="disabled")

#def sel_enabler():
#      sel_reg=reg_method_tk_var.get()
#      if sel_reg=="MLE-Uncensored":
#            entry1_4.configure(state="disabled");entry1_4.update()
#      elif sel_reg=="MLE-Censored":
#            entry1_4.configure(state="normal");entry1_4.update()
#      return True

dropMenu1_4 = ttk.Combobox(f4,textvariable=reg_method_tk_var,values=reg_method)
#dropMenu1_4.bind('<<ComboboxSelected>>', sel_enabler)

label2_4=ttk.Label(f4,text="Censoring factor").grid(row=0,column=3,pady=(15,15),padx=10)

dropMenu1_4.grid(row=0,column=2,pady=(15,15),padx=10,sticky="e")
entry1_4.grid(row=0,column=4,pady=(15,15),padx=10)


#%%

#notebook.pack(expand=True)
notebook.grid(row=0,column=0)

#%%
root.mainloop()

