# simpleSDOF.tcl
#
# Simple SDOF file, suitable for static or dynamic analyses.
#-----------------------------------------------------------
# Created 25/Nov/2011, Copyright (c) D. Vamvatsikos
#       Based on my more complex simpleSDOF4.tcl
# Updated 12/Apr/2013, added Elastic and Elastoplastic materials, plus 
#       an absolute acceleration recorder. I have also set runIDAflag=0 in all cases to avoid
#       potential misinterpretations with older output for new users.
#-----------------------------------------------------------
# NOTE: Massproportional damping always works. Stiffness proportional doesn't work if you have
#       only Zerolength elements.
# NOTE: OpenSEES can't do pushovers with SDOFs having negative slope. Even Arclength doesn't converge.
#       The trick I have implemented is to add a parallel elastic spring, thus making sure that my
#       total system always has postive stiffness and both springs have the same imposed displacements.
#       Then I just record only the force of the forces from the degrading spring (that I am interested
#       in after all!).
wipe

# apparently using "\" creates problems, while "/" is fine. This should also work
# just file for UNIX systems so it is much better!!
source ../util/units_constants_metric.tcl


#-----------------------------
# Select type of analysis
#set analysistype "RCycD"
#set analysistype "eigenvalue"
set analysistype "dynamic"
#set analysistype "pushover"
#----------------------------------
# select type of structural damping. 
# CAREFUL: Stiffnessproportional == NO damping for this zerolength element, unless explicitly 
# included with a damper or a "tangent damping" for elastic_with_damping material!
set dampingtype "massproportional"
#set dampingtype "stiffnessproportional"
#-------------------------------------
## Default selection of loading protocol for RCycD analysis. Good for ATC stuff!
set peakpts [list .005 .005 .01 .01 .02 .02 .03 .03 .04 .04 .05 .05 .06 .06 .07 .07 .08 .08]
#--------------------------------------
# Displacement step for the pushover
# good for ATC-stuff
set DispStep  [expr 1e-4]
# Good for non-ATC stuff
#set DispStep  [expr 1e-3*$m]
#------------------------------------
# set material type
#set material "atc62_spring1a"
#set material "atc62_spring1b"
#set material "atc62_spring2a"
#set material "atc62_spring2b"


if {[file exists "MatIDA_paramfile.tcl"]} {
   puts "Using EXTERNAL Parameters data-file (Matlab-generated)"
   source MatIDA_paramfile.tcl
} else {
   puts "Using STANDARD Parameters data-file"
   source standard_paramfile.tcl
}


model basic -ndm 1 -ndf 1


#---------------------------------------------------------------------------
# Source the analysistype information. Better to have it in a distinct file 
# especially if running multiple analyses of the same case
if {[file exists "MatIDA_anlsfile.tcl"]} {
   puts "Reading EXTERNAL Analysistype file (Matlab-generated)"
   source MatIDA_anlsfile.tcl
}


#-------------------------------------------------------------------------------
puts "Analysis: $analysistype"

#-------------------------------------------------------------------------
# Source the timehistory information to apply to the bridge. The default
# file applies "HDA255.AT2.txt" and "HDA165.AT2.txt", upscaled by 7.5
if {$analysistype=="dynamic" & [file exists "MatIDA_thfile.tcl"]} {
   set runIDAflag 0
   puts "Using EXTERNAL Timehistory data-file (Matlab-generated)"
   source MatIDA_thfile.tcl
} else {
   set runIDAflag 0
   puts "Using STANDARD Timehistory data-file"
   source standard_thfile.tcl
}
#-------------------------------------------------------------------------
# max allowed subdivisions of dt. Use 1 for fast runs, but I highly suggest using 2 for better
# accuracy. It allows the structure to go to higher flatlines (at least in a few cases I have tried).
set dtsub 1.0
# number of iterations
set niter 10

#-------------------------------------------------------------------------------
# Define the material to test.
#

set i 1
switch [string tolower $material] {
     elastic {
     puts "Elastic Material"
        set ki [expr 0.25/0.005]
        uniaxialMaterial Elastic $i $ki   
     } elastoplastic {
     puts "Elastic-perfectly plastic Material"
        set ki [expr 0.25/0.005]
        uniaxialMaterial ElasticPP $i $ki 1.0 
     } pinchgeneric {
     puts "pinching4 --> Generic quintilinear"
     for {set j 0} {$j<=4} {incr j} {
        eval "set d$j [lindex $di $j]"
        eval "set f$j [lindex $fi $j]"
     }
     #puts "$f0 -$f0"
     set ki [expr $f0/$d0]
     if {$degflag==0} {
       #uniaxialMaterial Pinching4 $matTag $ePf1 $ePd1 $ePf2 $ePd2 $ePf3 $ePd3 
       uniaxialMaterial Pinching4 [expr $i*10] \
                         $f0   $d0   $f1   $d1   $f2   $d2   $f3   $d3\
                        -$f0  -$d0  -$f1  -$d1  -$f2  -$d2  -$f3  -$d3\
                                 0.5 0.25 0.05 \
				 0.5 0.25 0.05 \
                                 0. 0. 0. 0. 0.\
				 0. 0. 0. 0. 0.\
                                 0. 0. 0. 0. 0.\
				 10. "energy" 
     } else {
       uniaxialMaterial Pinching4 [expr $i*10] \
                         $f0   $d0   $f1   $d1   $f2   $d2   $f3   $d3\
                        -$f0  -$d0  -$f1  -$d1  -$f2  -$d2  -$f3  -$d3\
                                 0.5 0.25 0.05 \
				 0.5 0.25 0.05 \
                                 0. 0.1 0. 0. 0.2\
				 0. 0.1 0. 0. 0.2\
                                 0. 0.4 0. 0.4 0.9\
				 10. "energy"
     }
     #uniaxialMaterial MinMax matTag? otherMatTag? -min minStrain? -max maxStrain? 
     uniaxialMaterial MinMax $i [expr $i*10] -min -$d4 -max $d4      
 } default {
   error "The material requested is non-existent. Check MatIDA_paramfile.tcl"
   exit
}
}


# only one material!
set imat_final $i


#-----------------------------------------  
#   if Tperiod <>0 set the mass to achieve the given period.
#   else set the period to match the given mass!
#-----------------------------------------
set kx $ki
if {$Tperiod!=0} {
   # set the mass now. It comes in "tons=1000kg"
   # Remember that T=2*pi*sqrt(m/k) <==> m = (T/(2pi))^2*k
   set mx [expr pow($Tperiod/(2*$pi),2)*$kx]
} else {
   set Tperiod 	[expr 2*$pi*sqrt($mx/$kx)]
}


set omega [expr pow($kx/$mx,0.5)]
puts "initial stiffness K=$kx"
puts "Mass              M=$mx"
puts "SDOF period       T=$Tperiod sec"
puts "cyclic frequency  W=$omega rad/sec"
puts "frequency         f=[expr 1.0/$Tperiod] Hz"


node 1 0 
node 2 0  -mass $mx
element zeroLength 1 1 2 -mat $imat_final -dir 1
fix 1 1 
if {$analysistype=="pushover"||$analysistype=="RCycD"} {
   puts "ADDING PARALLEL SPRING FOR PUSHOVER"
   puts "IF NON-CONVERGENCE OCCURS, INCREASE ITS STIFFNESS!"
   uniaxialMaterial Elastic 102 [expr 50*$kx] 0
   node 3 0
   node 4 0
   element zeroLength 2 3 4 -mat 102 -dir 1
   # slave node 4 to node 2
   equalDOF 2 4 1
   fix 3 1
}


recorder Node -file NodeD.out -time -node 2 -dof 1 disp


if {!$runIDAflag} {
  recorder Element -file SpringF.out -time -ele 1 force material $imat_final
  recorder Node -file NodeV.out -time -node 2 -dof 1 vel
  recorder Node -file NodeA.out -time -node 2 -dof 1 accel
}




if {$dampingtype=="massproportional"} {
  # values taken from chopra, pg. 418.
  puts "Mass proportional damping [expr $ksi*100]%"
  set alphaM [expr $ksi*2.0*$omega]
  set betaKinit 0
} else {
  puts "Initial stiffness proportional damping [expr $ksi*100]%"
  set alphaM 0
  set betaKinit [expr $ksi*2.0/$omega]
}
# tangent stiffness proportional damping; +beatK*KCurrent
set betaK 0 
# last commited stiffness RAYLEIGH damping parameter; +betaKcomm*KlastCommitt
set betaKcomm 0

rayleigh $alphaM $betaK $betaKinit $betaKcomm

puts "rayleigh $alphaM $betaK $betaKinit $betaKcomm"


constraints Plain
numberer RCM
test NormDispIncr 1.0e-8 20
system BandSPD
#system ProfileSPD
algorithm Newton
integrator Newmark 0.5 0.25



# Time to run some timehistory analysis.
# 
if {$analysistype=="dynamic"} {
  source ../util/DefineXYZ_UniformExcitation.tcl
  # you are getting back "nptsx" and "dtx"
  DefineXYZ_UniformExcitation $dtsub $g $GMdir $GMfileX $GMfileY $GMfileZ $GMfactorX $GMfactorY $GMfactorZ nptsx dtx
  recorder Node -file NodeAbs.out -timeSeries 1 -time -node 2 -dof 1 accel
  # Common running parameters for both forcing functions
  integrator Newmark 0.5 0.25
  test NormDispIncr 1.0e-8 10 0
  puts "analysis Transient"
  source ../util/RunTransient2Converge.tcl
  analysis Transient
   
  RunTransient2Converge [expr $nptsx*$dtsub] [expr $dtx/$dtsub]
  
 
} elseif {$analysistype=="pushover"} {
  source ../util/RunPushover2Converge.tcl
    pattern Plain 2 Linear {
      load 2 1 0
    }
  
  set IDctrlNode 2
  
  #
  set Nsteps 1200
  set DmaxPush [expr $Nsteps*$DispStep]
  puts "Pushing to [expr $Nsteps*$DispStep]m in $Nsteps steps"
  puts "CAREFUL NEGATIVE SLOPES WILL CAUSE A FAILURE TO CONVERGE"
  integrator DisplacementControl $IDctrlNode 1 $DispStep
  
  test NormDispIncr 1.0e-8 20 0
  analysis Static
  RunPushover2Converge  $IDctrlNode $DmaxPush $Nsteps
  #analyze $Nsteps
  loadConst -time 0.0
} elseif {$analysistype=="RCycD"} {
  # since this is performed under displacement-control, we need a reference load
  pattern Plain 2 Linear {
    load 2 1 0
   }
  test NormDispIncr 1.0e-8 20
  algorithm Newton
  source ../util/RunPushover2Converge.tcl
  source ../util/procRCycDAns2.tcl
  puts "Loading Protocol: $peakpts"
  puts "Performing Reverse Cyclic Displacement Analysis"
  set increments 20
  set nodeTag 2
  set dofTag 1
  ## start procedure for feeding in Reverse Cyclic loading to the model by Disp. control
  procRCycDAns2 $increments $nodeTag $dofTag $peakpts
} elseif {$analysistype=="eigenvalue"} {
  set outfile [open "SDOFModelPeriods.out" "w"]
  puts $outfile $Tperiod
  close $outfile
}



if {!$runIDAflag} {
  file delete SDOFModelPrint.out
  print SDOFModelPrint.out
}
