#-----------------------------------------------------------
# Created 25/Nov/2011, Copyright (c) D. Vamvatsikos
#       Based on my more complex simpleSDOF4.tcl
# Updated 12/Apr/2013, added Elastic and Elastoplastic materials, plus 
#       an absolute acceleration recorder. I have also set runIDAflag=0 in all cases to avoid
#       potential misinterpretations with older output for new users.
# Updated May/2015 for the implementation in the GEM RMTK
#-----------------------------------------------------------
source util/units_constants_metric.tcl

set dampingtype "massproportional"
#-------------------------------------
## Default selection of loading protocol for RCycD analysis. Good for ATC stuff!
set peakpts [list .005 .005 .01 .01 .02 .02 .03 .03 .04 .04 .05 .05 .06 .06 .07 .07 .08 .08]

source SDOF_paramfile.tcl

model basic -ndm 1 -ndf 1

#-------------------------------------------------------------------------------
puts "Analysis: $analysistype"

set runIDAflag 0
set GMfileX "gmr.txt"

#-------------------------------------------------------------------------
# max allowed subdivisions of dt. 
set dtsub 1.0
# number of iterations
set niter 10

#-------------------------------------------------------------------------------
# Define the material to test.

set i 1
switch [string tolower $material] {
     elastic {
     puts "Elastic Material"
        set ki [expr 0.25/0.005]
        uniaxialMaterial Elastic $i $ki   
     } elastoplastic {
     puts "Elastic-perfectly plastic Material"
        set ki [expr 0.25/0.005]
        uniaxialMaterial ElasticPP $i $ki 1.0 
     } pinchgeneric {
     puts "pinching4 --> Generic quintilinear"
     for {set j 0} {$j<=4} {incr j} {
        eval "set d$j [lindex $di $j]"
        eval "set f$j [lindex $fi $j]"
     }
     #puts "$f0 -$f0"
     set ki [expr $f0/$d0]
	 
	 puts "pinching parameters --> $pinchingtype"
	 if {$pinchingtype == "user-defined"} {
         uniaxialMaterial Pinching4 [expr $i*10] \
                           $f0   $d0   $f1   $d1   $f2   $d2   $f3   $d3\
                          -$f0  -$d0  -$f1  -$d1  -$f2  -$d2  -$f3  -$d3\
						  $rDisp $fForce $uForce\
						  $rDisp $fForce $uForce\
			 			 [lindex $gammaK 0] [lindex $gammaK 1] [lindex $gammaK 2] [lindex $gammaK 3] [lindex $gammaK 4] \
			 			 [lindex $gammaD 0] [lindex $gammaD 1] [lindex $gammaD 2] [lindex $gammaD 3] [lindex $gammaD 4] \
			 			 [lindex $gammaF 0] [lindex $gammaF 1] [lindex $gammaF 2] [lindex $gammaF 3] [lindex $gammaF 4] \
			 			 $gammaE $damage
     } else {
		 if {$degflag==0} {
	       #uniaxialMaterial Pinching4 $matTag $ePf1 $ePd1 $ePf2 $ePd2 $ePf3 $ePd3 
	       uniaxialMaterial Pinching4 [expr $i*10] \
	                         $f0   $d0   $f1   $d1   $f2   $d2   $f3   $d3\
	                        -$f0  -$d0  -$f1  -$d1  -$f2  -$d2  -$f3  -$d3\
	                                 0.5 0.25 0.05 \
					 0.5 0.25 0.05 \
	                                 0. 0. 0. 0. 0.\
					 0. 0. 0. 0. 0.\
	                                 0. 0. 0. 0. 0.\
					 10. "energy"
		 } else {
       	  uniaxialMaterial Pinching4 [expr $i*10] \
                         $f0   $d0   $f1   $d1   $f2   $d2   $f3   $d3\
                        -$f0  -$d0  -$f1  -$d1  -$f2  -$d2  -$f3  -$d3\
                                 0.5 0.25 0.05 \
				 0.5 0.25 0.05 \
                                 0. 0.1 0. 0. 0.2\
				 0. 0.1 0. 0. 0.2\
                                 0. 0.4 0. 0.4 0.9\
				 10. "energy"
     	 }
	 }
	  
     #uniaxialMaterial MinMax matTag? otherMatTag? -min minStrain? -max maxStrain? 
     uniaxialMaterial MinMax $i [expr $i*10] -min -$d4 -max $d4      
 } default {
   error "The material requested is non-existent. Check MatIDA_paramfile.tcl"
   exit
}
}

set imat_final $i

#-----------------------------------------  
#   if Tperiod <>0 set the mass to achieve the given period.
#   else set the period to match the given mass!
#-----------------------------------------
set kx $ki
if {$Tperiod!=0} {
   set mx [expr pow($Tperiod/(2*$pi),2)*$kx]
} else {
   set Tperiod 	[expr 2*$pi*sqrt($mx/$kx)]
}

set omega [expr pow($kx/$mx,0.5)]
puts "initial stiffness K=$kx"
puts "Mass              M=$mx"
puts "SDOF period       T=$Tperiod sec"
puts "cyclic frequency  W=$omega rad/sec"
puts "frequency         f=[expr 1.0/$Tperiod] Hz"

node 1 0 
node 2 0  -mass $mx
element zeroLength 1 1 2 -mat $imat_final -dir 1
fix 1 1 

recorder Node -file NodeD.out -time -node 2 -dof 1 disp

if {!$runIDAflag} {
  recorder Element -file SpringF.out -time -ele 1 force material $imat_final
  recorder Node -file NodeV.out -time -node 2 -dof 1 vel
  recorder Node -file NodeA.out -time -node 2 -dof 1 accel
}

set outfile [open "Periods.out" "w"]
puts $outfile $Tperiod
close $outfile

if {$dampingtype=="massproportional"} {
  # values taken from Chopra
  puts "Mass proportional damping [expr $ksi*100]%"
  set alphaM [expr $ksi*2.0*$omega]
  set betaKinit 0
} else {
  puts "Initial stiffness proportional damping [expr $ksi*100]%"
  set alphaM 0
  set betaKinit [expr $ksi*2.0/$omega]
}
# tangent stiffness proportional damping; +beatK*KCurrent
set betaK 0 
# last commited stiffness RAYLEIGH damping parameter; +betaKcomm*KlastCommitt
set betaKcomm 0

rayleigh $alphaM $betaK $betaKinit $betaKcomm

puts "rayleigh $alphaM $betaK $betaKinit $betaKcomm"

constraints Plain
numberer RCM
test NormDispIncr 1.0e-8 20
system BandSPD
#system ProfileSPD
algorithm Newton
integrator Newmark 0.5 0.25
puts $analysistype

if {$analysistype=="dynamic"} {
	set GMfactorX   1.
	set fp [open $GMfileX r]
	set data [read $fp]
	close $fp
	set lines [split $data "\n"]
	set no_points [lindex $lines 0]
	set dtx [lindex $lines 1]
 
	for {set j 3} {$j<=$no_points} {incr j} {
   	lappend acc [lindex $lines $j]
	}
  
	set GaccelX "Path 1 -dt $dtx -values {$acc} -factor [expr $GMfactorX]"
	eval "timeSeries $GaccelX"
	pattern UniformExcitation 2 1 -accel 1
  
  	recorder Node -file NodeAbs.out -timeSeries 1 -time -node 2 -dof 1 accel
  	integrator Newmark 0.5 0.25
  	test NormDispIncr 1.0e-8 10 0
  	puts "analysis Transient"
  	source util/RunTransient2Converge.tcl
  	analysis Transient

  	RunTransient2Converge [expr $no_points*$dtsub] [expr $dtx/$dtsub]
 }
 
if {!$runIDAflag} {
  file delete SDOFModelPrint.out
  print SDOFModelPrint.out
}